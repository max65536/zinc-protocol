export declare function setDefaultWasm(type: "bundler" | "node"): void;
export declare function importCoreWasm(): Promise<{
    default: typeof import("./core/bridge");
    post_message_ix(program_id: string, payer: string, emitter: string, message: string, nonce: number, msg: Uint8Array, consistency: string): any;
    post_message_unreliable_ix(program_id: string, payer: string, emitter: string, message: string, nonce: number, msg: Uint8Array, consistency: string): any;
    post_vaa_ix(program_id: string, payer: string, signature_set: string, vaa: Uint8Array): any;
    update_guardian_set_ix(program_id: string, payer: string, vaa: Uint8Array): any;
    set_fees_ix(program_id: string, payer: string, vaa: Uint8Array): any;
    transfer_fees_ix(program_id: string, payer: string, vaa: Uint8Array): any;
    upgrade_contract_ix(program_id: string, payer: string, spill: string, vaa: Uint8Array): any;
    verify_signatures_ix(program_id: string, payer: string, guardian_set_index: number, guardian_set: any, signature_set: string, vaa_data: Uint8Array): any;
    guardian_set_address(bridge: string, index: number): Uint8Array;
    parse_guardian_set(data: Uint8Array): any;
    state_address(bridge: string): Uint8Array;
    parse_state(data: Uint8Array): any;
    fee_collector_address(bridge: string): Uint8Array;
    claim_address(program_id: string, vaa: Uint8Array): Uint8Array;
    parse_posted_message(data: Uint8Array): any;
    parse_vaa(data: Uint8Array): any;
    init(): void;
    Hash: typeof import("./core/bridge").Hash;
    Instruction: typeof import("./core/bridge").Instruction;
    Instructions: typeof import("./core/bridge").Instructions;
    Message: typeof import("./core/bridge").Message;
    Pubkey: typeof import("./core/bridge").Pubkey;
    SystemInstruction: typeof import("./core/bridge").SystemInstruction;
}>;
export declare function importMigrationWasm(): Promise<{
    default: typeof import("./migration/wormhole_migration");
    add_liquidity(program_id: string, from_mint: string, to_mint: string, liquidity_token_account: string, lp_share_token_account: string, amount: bigint): any;
    remove_liquidity(program_id: string, from_mint: string, to_mint: string, liquidity_token_account: string, lp_share_token_account: string, amount: bigint): any;
    claim_shares(program_id: string, from_mint: string, to_mint: string, output_token_account: string, lp_share_token_account: string, amount: bigint): any;
    create_pool(program_id: string, payer: string, from_mint: string, to_mint: string): any;
    migrate_tokens(program_id: string, from_mint: string, to_mint: string, input_token_account: string, output_token_account: string, amount: bigint): any;
    pool_address(program_id: string, from_mint: string, to_mint: string): Uint8Array;
    authority_address(program_id: string): Uint8Array;
    share_mint_address(program_id: string, pool: string): Uint8Array;
    from_custody_address(program_id: string, pool: string): Uint8Array;
    to_custody_address(program_id: string, pool: string): Uint8Array;
    parse_pool(data: Uint8Array): any;
    init(): void;
    Hash: typeof import("./migration/wormhole_migration").Hash;
    Instruction: typeof import("./migration/wormhole_migration").Instruction;
    Instructions: typeof import("./migration/wormhole_migration").Instructions;
    Message: typeof import("./migration/wormhole_migration").Message;
    Pubkey: typeof import("./migration/wormhole_migration").Pubkey;
    SystemInstruction: typeof import("./migration/wormhole_migration").SystemInstruction;
}>;
export declare function importNftWasm(): Promise<{
    default: typeof import("./nft/nft_bridge");
    transfer_native_ix(program_id: string, bridge_id: string, payer: string, message: string, from: string, mint: string, nonce: number, target_address: Uint8Array, target_chain: number): any;
    transfer_wrapped_ix(program_id: string, bridge_id: string, payer: string, message: string, from: string, from_owner: string, token_chain: number, token_address: Uint8Array, token_id: Uint8Array, nonce: number, target_address: Uint8Array, target_chain: number): any;
    complete_transfer_native_ix(program_id: string, bridge_id: string, payer: string, to_authority: string, vaa: Uint8Array): any;
    complete_transfer_wrapped_ix(program_id: string, bridge_id: string, payer: string, to_authority: string, vaa: Uint8Array): any;
    complete_transfer_wrapped_meta_ix(program_id: string, bridge_id: string, payer: string, vaa: Uint8Array): any;
    upgrade_contract_ix(program_id: string, bridge_id: string, payer: string, spill: string, vaa: Uint8Array): any;
    register_chain_ix(program_id: string, bridge_id: string, payer: string, vaa: Uint8Array): any;
    emitter_address(program_id: string): Uint8Array;
    approval_authority_address(program_id: string): Uint8Array;
    wrapped_address(program_id: string, token_address: Uint8Array, token_chain: number, token_id: Uint8Array): Uint8Array;
    wrapped_meta_address(program_id: string, mint_address: Uint8Array): Uint8Array;
    spl_meta_address(mint_address: Uint8Array): Uint8Array;
    parse_wrapped_meta(data: Uint8Array): any;
    parse_endpoint_registration(data: Uint8Array): any;
    init(): void;
    Hash: typeof import("./nft/nft_bridge").Hash;
    Instruction: typeof import("./nft/nft_bridge").Instruction;
    Instructions: typeof import("./nft/nft_bridge").Instructions;
    Message: typeof import("./nft/nft_bridge").Message;
    Pubkey: typeof import("./nft/nft_bridge").Pubkey;
    SystemInstruction: typeof import("./nft/nft_bridge").SystemInstruction;
}>;
export declare function importTokenWasm(): Promise<{
    default: typeof import("./token/token_bridge");
    attest_ix(program_id: string, bridge_id: string, payer: string, message: string, mint: string, nonce: number): any;
    transfer_native_ix(program_id: string, bridge_id: string, payer: string, message: string, from: string, mint: string, nonce: number, amount: bigint, fee: bigint, target_address: Uint8Array, target_chain: number): any;
    transfer_native_with_payload_ix(program_id: string, bridge_id: string, payer: string, message: string, from: string, mint: string, nonce: number, amount: bigint, target_address: Uint8Array, target_chain: number, payload: Uint8Array): any;
    transfer_wrapped_ix(program_id: string, bridge_id: string, payer: string, message: string, from: string, from_owner: string, token_chain: number, token_address: Uint8Array, nonce: number, amount: bigint, fee: bigint, target_address: Uint8Array, target_chain: number): any;
    transfer_wrapped_with_payload_ix(program_id: string, bridge_id: string, payer: string, message: string, from: string, from_owner: string, token_chain: number, token_address: Uint8Array, nonce: number, amount: bigint, target_address: Uint8Array, target_chain: number, payload: Uint8Array): any;
    complete_transfer_native_ix(program_id: string, bridge_id: string, payer: string, vaa: Uint8Array, fee_recipient?: string | undefined): any;
    complete_transfer_wrapped_ix(program_id: string, bridge_id: string, payer: string, vaa: Uint8Array, fee_recipient?: string | undefined): any;
    create_wrapped_ix(program_id: string, bridge_id: string, payer: string, vaa: Uint8Array): any;
    upgrade_contract_ix(program_id: string, bridge_id: string, payer: string, spill: string, vaa: Uint8Array): any;
    register_chain_ix(program_id: string, bridge_id: string, payer: string, vaa: Uint8Array): any;
    emitter_address(program_id: string): Uint8Array;
    custody_signer(program_id: string): Uint8Array;
    approval_authority_address(program_id: string): Uint8Array;
    wrapped_address(program_id: string, token_address: Uint8Array, token_chain: number): Uint8Array;
    wrapped_meta_address(program_id: string, mint_address: Uint8Array): Uint8Array;
    parse_wrapped_meta(data: Uint8Array): any;
    parse_endpoint_registration(data: Uint8Array): any;
    init(): void;
    Hash: typeof import("./token/token_bridge").Hash;
    Instruction: typeof import("./token/token_bridge").Instruction;
    Instructions: typeof import("./token/token_bridge").Instructions;
    Message: typeof import("./token/token_bridge").Message;
    Pubkey: typeof import("./token/token_bridge").Pubkey;
    SystemInstruction: typeof import("./token/token_bridge").SystemInstruction;
}>;
