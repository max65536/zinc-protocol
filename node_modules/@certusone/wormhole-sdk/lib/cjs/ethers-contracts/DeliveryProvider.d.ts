import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace DeliveryProviderStructs {
    type AssetConversionBufferUpdateStruct = {
        chainId: PromiseOrValue<BigNumberish>;
        buffer: PromiseOrValue<BigNumberish>;
        bufferDenominator: PromiseOrValue<BigNumberish>;
    };
    type AssetConversionBufferUpdateStructOutput = [
        number,
        number,
        number
    ] & {
        chainId: number;
        buffer: number;
        bufferDenominator: number;
    };
    type UpdateStruct = {
        updateAssetConversionBuffer: PromiseOrValue<boolean>;
        updateDeliverGasOverhead: PromiseOrValue<boolean>;
        updatePrice: PromiseOrValue<boolean>;
        updateTargetChainAddress: PromiseOrValue<boolean>;
        updateMaximumBudget: PromiseOrValue<boolean>;
        updateSupportedChain: PromiseOrValue<boolean>;
        isSupported: PromiseOrValue<boolean>;
        chainId: PromiseOrValue<BigNumberish>;
        buffer: PromiseOrValue<BigNumberish>;
        bufferDenominator: PromiseOrValue<BigNumberish>;
        newGasOverhead: PromiseOrValue<BigNumberish>;
        gasPrice: PromiseOrValue<BigNumberish>;
        nativeCurrencyPrice: PromiseOrValue<BigNumberish>;
        targetChainAddress: PromiseOrValue<BytesLike>;
        maximumTotalBudget: PromiseOrValue<BigNumberish>;
    };
    type UpdateStructOutput = [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        updateAssetConversionBuffer: boolean;
        updateDeliverGasOverhead: boolean;
        updatePrice: boolean;
        updateTargetChainAddress: boolean;
        updateMaximumBudget: boolean;
        updateSupportedChain: boolean;
        isSupported: boolean;
        chainId: number;
        buffer: number;
        bufferDenominator: number;
        newGasOverhead: BigNumber;
        gasPrice: BigNumber;
        nativeCurrencyPrice: BigNumber;
        targetChainAddress: string;
        maximumTotalBudget: BigNumber;
    };
    type CoreConfigStruct = {
        updateWormholeRelayer: PromiseOrValue<boolean>;
        updateRewardAddress: PromiseOrValue<boolean>;
        coreRelayer: PromiseOrValue<string>;
        rewardAddress: PromiseOrValue<string>;
    };
    type CoreConfigStructOutput = [boolean, boolean, string, string] & {
        updateWormholeRelayer: boolean;
        updateRewardAddress: boolean;
        coreRelayer: string;
        rewardAddress: string;
    };
    type DeliverGasOverheadUpdateStruct = {
        chainId: PromiseOrValue<BigNumberish>;
        newGasOverhead: PromiseOrValue<BigNumberish>;
    };
    type DeliverGasOverheadUpdateStructOutput = [number, BigNumber] & {
        chainId: number;
        newGasOverhead: BigNumber;
    };
    type MaximumBudgetUpdateStruct = {
        chainId: PromiseOrValue<BigNumberish>;
        maximumTotalBudget: PromiseOrValue<BigNumberish>;
    };
    type MaximumBudgetUpdateStructOutput = [number, BigNumber] & {
        chainId: number;
        maximumTotalBudget: BigNumber;
    };
    type UpdatePriceStruct = {
        chainId: PromiseOrValue<BigNumberish>;
        gasPrice: PromiseOrValue<BigNumberish>;
        nativeCurrencyPrice: PromiseOrValue<BigNumberish>;
    };
    type UpdatePriceStructOutput = [number, BigNumber, BigNumber] & {
        chainId: number;
        gasPrice: BigNumber;
        nativeCurrencyPrice: BigNumber;
    };
    type SupportedChainUpdateStruct = {
        chainId: PromiseOrValue<BigNumberish>;
        isSupported: PromiseOrValue<boolean>;
    };
    type SupportedChainUpdateStructOutput = [number, boolean] & {
        chainId: number;
        isSupported: boolean;
    };
    type TargetChainUpdateStruct = {
        chainId: PromiseOrValue<BigNumberish>;
        targetChainAddress: PromiseOrValue<BytesLike>;
    };
    type TargetChainUpdateStructOutput = [number, string] & {
        chainId: number;
        targetChainAddress: string;
    };
}
export interface DeliveryProviderInterface extends utils.Interface {
    functions: {
        "assetConversionBuffer(uint16)": FunctionFragment;
        "chainId()": FunctionFragment;
        "confirmOwnershipTransferRequest()": FunctionFragment;
        "coreRelayer()": FunctionFragment;
        "deliverGasOverhead(uint16)": FunctionFragment;
        "gasPrice(uint16)": FunctionFragment;
        "getRewardAddress()": FunctionFragment;
        "getTargetChainAddress(uint16)": FunctionFragment;
        "isChainSupported(uint16)": FunctionFragment;
        "isInitialized(address)": FunctionFragment;
        "maximumBudget(uint16)": FunctionFragment;
        "nativeCurrencyPrice(uint16)": FunctionFragment;
        "owner()": FunctionFragment;
        "pendingOwner()": FunctionFragment;
        "pricingWallet()": FunctionFragment;
        "quoteAssetConversion(uint16,uint256)": FunctionFragment;
        "quoteDeliveryOverhead(uint16)": FunctionFragment;
        "quoteDeliveryPrice(uint16,uint256,bytes)": FunctionFragment;
        "quoteEvmDeliveryPrice(uint16,uint256,uint256)": FunctionFragment;
        "quoteGasCost(uint16,uint256)": FunctionFragment;
        "quoteGasPrice(uint16)": FunctionFragment;
        "rewardAddress()": FunctionFragment;
        "submitOwnershipTransferRequest(uint16,address)": FunctionFragment;
        "targetChainAddress(uint16)": FunctionFragment;
        "updateAssetConversionBuffer(uint16,uint16,uint16)": FunctionFragment;
        "updateAssetConversionBuffers((uint16,uint16,uint16)[])": FunctionFragment;
        "updateConfig((bool,bool,bool,bool,bool,bool,bool,uint16,uint16,uint16,uint256,uint256,uint256,bytes32,uint256)[],(bool,bool,address,address))": FunctionFragment;
        "updateDeliverGasOverhead(uint16,uint256)": FunctionFragment;
        "updateDeliverGasOverheads((uint16,uint256)[])": FunctionFragment;
        "updateMaximumBudget(uint16,uint256)": FunctionFragment;
        "updateMaximumBudgets((uint16,uint256)[])": FunctionFragment;
        "updatePrice(uint16,uint256,uint256)": FunctionFragment;
        "updatePrices((uint16,uint256,uint256)[])": FunctionFragment;
        "updatePricingWallet(address)": FunctionFragment;
        "updateRewardAddress(address)": FunctionFragment;
        "updateSupportedChain(uint16,bool)": FunctionFragment;
        "updateSupportedChains((uint16,bool)[])": FunctionFragment;
        "updateTargetChainAddress(uint16,bytes32)": FunctionFragment;
        "updateTargetChainAddresses((uint16,bytes32)[])": FunctionFragment;
        "updateWormholeRelayer(address)": FunctionFragment;
        "upgrade(uint16,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assetConversionBuffer" | "chainId" | "confirmOwnershipTransferRequest" | "coreRelayer" | "deliverGasOverhead" | "gasPrice" | "getRewardAddress" | "getTargetChainAddress" | "isChainSupported" | "isInitialized" | "maximumBudget" | "nativeCurrencyPrice" | "owner" | "pendingOwner" | "pricingWallet" | "quoteAssetConversion" | "quoteDeliveryOverhead" | "quoteDeliveryPrice" | "quoteEvmDeliveryPrice" | "quoteGasCost" | "quoteGasPrice" | "rewardAddress" | "submitOwnershipTransferRequest" | "targetChainAddress" | "updateAssetConversionBuffer" | "updateAssetConversionBuffers" | "updateConfig" | "updateDeliverGasOverhead" | "updateDeliverGasOverheads" | "updateMaximumBudget" | "updateMaximumBudgets" | "updatePrice" | "updatePrices" | "updatePricingWallet" | "updateRewardAddress" | "updateSupportedChain" | "updateSupportedChains" | "updateTargetChainAddress" | "updateTargetChainAddresses" | "updateWormholeRelayer" | "upgrade"): FunctionFragment;
    encodeFunctionData(functionFragment: "assetConversionBuffer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "confirmOwnershipTransferRequest", values?: undefined): string;
    encodeFunctionData(functionFragment: "coreRelayer", values?: undefined): string;
    encodeFunctionData(functionFragment: "deliverGasOverhead", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "gasPrice", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRewardAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetChainAddress", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isChainSupported", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isInitialized", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maximumBudget", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "nativeCurrencyPrice", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pricingWallet", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteAssetConversion", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "quoteDeliveryOverhead", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "quoteDeliveryPrice", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quoteEvmDeliveryPrice", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "quoteGasCost", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "quoteGasPrice", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "rewardAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "submitOwnershipTransferRequest", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "targetChainAddress", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateAssetConversionBuffer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "updateAssetConversionBuffers", values: [DeliveryProviderStructs.AssetConversionBufferUpdateStruct[]]): string;
    encodeFunctionData(functionFragment: "updateConfig", values: [
        DeliveryProviderStructs.UpdateStruct[],
        DeliveryProviderStructs.CoreConfigStruct
    ]): string;
    encodeFunctionData(functionFragment: "updateDeliverGasOverhead", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateDeliverGasOverheads", values: [DeliveryProviderStructs.DeliverGasOverheadUpdateStruct[]]): string;
    encodeFunctionData(functionFragment: "updateMaximumBudget", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateMaximumBudgets", values: [DeliveryProviderStructs.MaximumBudgetUpdateStruct[]]): string;
    encodeFunctionData(functionFragment: "updatePrice", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "updatePrices", values: [DeliveryProviderStructs.UpdatePriceStruct[]]): string;
    encodeFunctionData(functionFragment: "updatePricingWallet", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateRewardAddress", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateSupportedChain", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "updateSupportedChains", values: [DeliveryProviderStructs.SupportedChainUpdateStruct[]]): string;
    encodeFunctionData(functionFragment: "updateTargetChainAddress", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "updateTargetChainAddresses", values: [DeliveryProviderStructs.TargetChainUpdateStruct[]]): string;
    encodeFunctionData(functionFragment: "updateWormholeRelayer", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgrade", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "assetConversionBuffer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "confirmOwnershipTransferRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "coreRelayer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverGasOverhead", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetChainAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isChainSupported", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInitialized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maximumBudget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeCurrencyPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pricingWallet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteAssetConversion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteDeliveryOverhead", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteDeliveryPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteEvmDeliveryPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteGasCost", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitOwnershipTransferRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetChainAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateAssetConversionBuffer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateAssetConversionBuffers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDeliverGasOverhead", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDeliverGasOverheads", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMaximumBudget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMaximumBudgets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePrices", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePricingWallet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSupportedChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSupportedChains", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTargetChainAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTargetChainAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormholeRelayer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "AssetConversionBufferUpdated(uint16,uint16,uint16)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "ChainSupportUpdated(uint16,bool)": EventFragment;
        "ContractUpgraded(address,address)": EventFragment;
        "DeliverGasOverheadUpdated(uint256,uint256)": EventFragment;
        "OwnershipTransfered(address,address)": EventFragment;
        "RewardAddressUpdated(address)": EventFragment;
        "TargetChainAddressUpdated(uint16,bytes32)": EventFragment;
        "Upgraded(address)": EventFragment;
        "WormholeRelayerUpdated(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AssetConversionBufferUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ChainSupportUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeliverGasOverheadUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransfered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardAddressUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TargetChainAddressUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WormholeRelayerUpdated"): EventFragment;
}
export interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
export declare type AdminChangedEvent = TypedEvent<[
    string,
    string
], AdminChangedEventObject>;
export declare type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
export interface AssetConversionBufferUpdatedEventObject {
    targetChain: number;
    buffer: number;
    bufferDenominator: number;
}
export declare type AssetConversionBufferUpdatedEvent = TypedEvent<[
    number,
    number,
    number
], AssetConversionBufferUpdatedEventObject>;
export declare type AssetConversionBufferUpdatedEventFilter = TypedEventFilter<AssetConversionBufferUpdatedEvent>;
export interface BeaconUpgradedEventObject {
    beacon: string;
}
export declare type BeaconUpgradedEvent = TypedEvent<[
    string
], BeaconUpgradedEventObject>;
export declare type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
export interface ChainSupportUpdatedEventObject {
    targetChain: number;
    isSupported: boolean;
}
export declare type ChainSupportUpdatedEvent = TypedEvent<[
    number,
    boolean
], ChainSupportUpdatedEventObject>;
export declare type ChainSupportUpdatedEventFilter = TypedEventFilter<ChainSupportUpdatedEvent>;
export interface ContractUpgradedEventObject {
    oldContract: string;
    newContract: string;
}
export declare type ContractUpgradedEvent = TypedEvent<[
    string,
    string
], ContractUpgradedEventObject>;
export declare type ContractUpgradedEventFilter = TypedEventFilter<ContractUpgradedEvent>;
export interface DeliverGasOverheadUpdatedEventObject {
    oldGasOverhead: BigNumber;
    newGasOverhead: BigNumber;
}
export declare type DeliverGasOverheadUpdatedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], DeliverGasOverheadUpdatedEventObject>;
export declare type DeliverGasOverheadUpdatedEventFilter = TypedEventFilter<DeliverGasOverheadUpdatedEvent>;
export interface OwnershipTransferedEventObject {
    oldOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferedEvent = TypedEvent<[
    string,
    string
], OwnershipTransferedEventObject>;
export declare type OwnershipTransferedEventFilter = TypedEventFilter<OwnershipTransferedEvent>;
export interface RewardAddressUpdatedEventObject {
    newAddress: string;
}
export declare type RewardAddressUpdatedEvent = TypedEvent<[
    string
], RewardAddressUpdatedEventObject>;
export declare type RewardAddressUpdatedEventFilter = TypedEventFilter<RewardAddressUpdatedEvent>;
export interface TargetChainAddressUpdatedEventObject {
    targetChain: number;
    newAddress: string;
}
export declare type TargetChainAddressUpdatedEvent = TypedEvent<[
    number,
    string
], TargetChainAddressUpdatedEventObject>;
export declare type TargetChainAddressUpdatedEventFilter = TypedEventFilter<TargetChainAddressUpdatedEvent>;
export interface UpgradedEventObject {
    implementation: string;
}
export declare type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
export declare type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
export interface WormholeRelayerUpdatedEventObject {
    coreRelayer: string;
}
export declare type WormholeRelayerUpdatedEvent = TypedEvent<[
    string
], WormholeRelayerUpdatedEventObject>;
export declare type WormholeRelayerUpdatedEventFilter = TypedEventFilter<WormholeRelayerUpdatedEvent>;
export interface DeliveryProvider extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DeliveryProviderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            number
        ] & {
            tolerance: number;
            toleranceDenominator: number;
        }>;
        chainId(overrides?: CallOverrides): Promise<[number]>;
        confirmOwnershipTransferRequest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        coreRelayer(overrides?: CallOverrides): Promise<[string]>;
        deliverGasOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        gasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getRewardAddress(overrides?: CallOverrides): Promise<[string]>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            deliveryProviderAddress: string;
        }>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean] & {
            supported: boolean;
        }>;
        isInitialized(impl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        maximumBudget(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        nativeCurrencyPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pendingOwner(overrides?: CallOverrides): Promise<[string]>;
        pricingWallet(overrides?: CallOverrides): Promise<[string]>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            targetChainAmount: BigNumber;
        }>;
        quoteDeliveryOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nativePriceQuote: BigNumber;
        }>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            nativePriceQuote: BigNumber;
            encodedExecutionInfo: string;
        }>;
        quoteEvmDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativePriceQuote: BigNumber;
            targetChainRefundPerUnitGasUnused: BigNumber;
        }>;
        quoteGasCost(targetChain: PromiseOrValue<BigNumberish>, gasAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            totalCost: BigNumber;
        }>;
        quoteGasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            price: BigNumber;
        }>;
        rewardAddress(overrides?: CallOverrides): Promise<[string]>;
        submitOwnershipTransferRequest(thisRelayerChainId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        updateAssetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, buffer: PromiseOrValue<BigNumberish>, bufferDenominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateAssetConversionBuffers(updates: DeliveryProviderStructs.AssetConversionBufferUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateConfig(updates: DeliveryProviderStructs.UpdateStruct[], coreConfig: DeliveryProviderStructs.CoreConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateDeliverGasOverhead(chainId: PromiseOrValue<BigNumberish>, newGasOverhead: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateDeliverGasOverheads(overheadUpdates: DeliveryProviderStructs.DeliverGasOverheadUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateMaximumBudget(targetChain: PromiseOrValue<BigNumberish>, maximumTotalBudget: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateMaximumBudgets(updates: DeliveryProviderStructs.MaximumBudgetUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePrice(updateChainId: PromiseOrValue<BigNumberish>, updateGasPrice: PromiseOrValue<BigNumberish>, updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePrices(updates: DeliveryProviderStructs.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePricingWallet(newPricingWallet: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateRewardAddress(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateSupportedChain(targetChain: PromiseOrValue<BigNumberish>, isSupported: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateSupportedChains(updates: DeliveryProviderStructs.SupportedChainUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, newAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateTargetChainAddresses(updates: DeliveryProviderStructs.TargetChainUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateWormholeRelayer(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgrade(deliveryProviderChainId: PromiseOrValue<BigNumberish>, newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    assetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        number,
        number
    ] & {
        tolerance: number;
        toleranceDenominator: number;
    }>;
    chainId(overrides?: CallOverrides): Promise<number>;
    confirmOwnershipTransferRequest(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    coreRelayer(overrides?: CallOverrides): Promise<string>;
    deliverGasOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    gasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getRewardAddress(overrides?: CallOverrides): Promise<string>;
    getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isInitialized(impl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    maximumBudget(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    nativeCurrencyPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    pendingOwner(overrides?: CallOverrides): Promise<string>;
    pricingWallet(overrides?: CallOverrides): Promise<string>;
    quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    quoteDeliveryOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        string
    ] & {
        nativePriceQuote: BigNumber;
        encodedExecutionInfo: string;
    }>;
    quoteEvmDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerUnitGasUnused: BigNumber;
    }>;
    quoteGasCost(targetChain: PromiseOrValue<BigNumberish>, gasAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    quoteGasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    rewardAddress(overrides?: CallOverrides): Promise<string>;
    submitOwnershipTransferRequest(thisRelayerChainId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    updateAssetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, buffer: PromiseOrValue<BigNumberish>, bufferDenominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateAssetConversionBuffers(updates: DeliveryProviderStructs.AssetConversionBufferUpdateStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateConfig(updates: DeliveryProviderStructs.UpdateStruct[], coreConfig: DeliveryProviderStructs.CoreConfigStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateDeliverGasOverhead(chainId: PromiseOrValue<BigNumberish>, newGasOverhead: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateDeliverGasOverheads(overheadUpdates: DeliveryProviderStructs.DeliverGasOverheadUpdateStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateMaximumBudget(targetChain: PromiseOrValue<BigNumberish>, maximumTotalBudget: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateMaximumBudgets(updates: DeliveryProviderStructs.MaximumBudgetUpdateStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePrice(updateChainId: PromiseOrValue<BigNumberish>, updateGasPrice: PromiseOrValue<BigNumberish>, updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePrices(updates: DeliveryProviderStructs.UpdatePriceStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePricingWallet(newPricingWallet: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateRewardAddress(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateSupportedChain(targetChain: PromiseOrValue<BigNumberish>, isSupported: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateSupportedChains(updates: DeliveryProviderStructs.SupportedChainUpdateStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, newAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateTargetChainAddresses(updates: DeliveryProviderStructs.TargetChainUpdateStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateWormholeRelayer(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgrade(deliveryProviderChainId: PromiseOrValue<BigNumberish>, newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        assetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            number
        ] & {
            tolerance: number;
            toleranceDenominator: number;
        }>;
        chainId(overrides?: CallOverrides): Promise<number>;
        confirmOwnershipTransferRequest(overrides?: CallOverrides): Promise<void>;
        coreRelayer(overrides?: CallOverrides): Promise<string>;
        deliverGasOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        gasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRewardAddress(overrides?: CallOverrides): Promise<string>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isInitialized(impl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        maximumBudget(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nativeCurrencyPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        pendingOwner(overrides?: CallOverrides): Promise<string>;
        pricingWallet(overrides?: CallOverrides): Promise<string>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteDeliveryOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            nativePriceQuote: BigNumber;
            encodedExecutionInfo: string;
        }>;
        quoteEvmDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativePriceQuote: BigNumber;
            targetChainRefundPerUnitGasUnused: BigNumber;
        }>;
        quoteGasCost(targetChain: PromiseOrValue<BigNumberish>, gasAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteGasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        rewardAddress(overrides?: CallOverrides): Promise<string>;
        submitOwnershipTransferRequest(thisRelayerChainId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        targetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        updateAssetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, buffer: PromiseOrValue<BigNumberish>, bufferDenominator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateAssetConversionBuffers(updates: DeliveryProviderStructs.AssetConversionBufferUpdateStruct[], overrides?: CallOverrides): Promise<void>;
        updateConfig(updates: DeliveryProviderStructs.UpdateStruct[], coreConfig: DeliveryProviderStructs.CoreConfigStruct, overrides?: CallOverrides): Promise<void>;
        updateDeliverGasOverhead(chainId: PromiseOrValue<BigNumberish>, newGasOverhead: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateDeliverGasOverheads(overheadUpdates: DeliveryProviderStructs.DeliverGasOverheadUpdateStruct[], overrides?: CallOverrides): Promise<void>;
        updateMaximumBudget(targetChain: PromiseOrValue<BigNumberish>, maximumTotalBudget: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateMaximumBudgets(updates: DeliveryProviderStructs.MaximumBudgetUpdateStruct[], overrides?: CallOverrides): Promise<void>;
        updatePrice(updateChainId: PromiseOrValue<BigNumberish>, updateGasPrice: PromiseOrValue<BigNumberish>, updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updatePrices(updates: DeliveryProviderStructs.UpdatePriceStruct[], overrides?: CallOverrides): Promise<void>;
        updatePricingWallet(newPricingWallet: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateRewardAddress(newAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateSupportedChain(targetChain: PromiseOrValue<BigNumberish>, isSupported: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        updateSupportedChains(updates: DeliveryProviderStructs.SupportedChainUpdateStruct[], overrides?: CallOverrides): Promise<void>;
        updateTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, newAddress: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        updateTargetChainAddresses(updates: DeliveryProviderStructs.TargetChainUpdateStruct[], overrides?: CallOverrides): Promise<void>;
        updateWormholeRelayer(newAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgrade(deliveryProviderChainId: PromiseOrValue<BigNumberish>, newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        "AssetConversionBufferUpdated(uint16,uint16,uint16)"(targetChain?: null, buffer?: null, bufferDenominator?: null): AssetConversionBufferUpdatedEventFilter;
        AssetConversionBufferUpdated(targetChain?: null, buffer?: null, bufferDenominator?: null): AssetConversionBufferUpdatedEventFilter;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        "ChainSupportUpdated(uint16,bool)"(targetChain?: null, isSupported?: null): ChainSupportUpdatedEventFilter;
        ChainSupportUpdated(targetChain?: null, isSupported?: null): ChainSupportUpdatedEventFilter;
        "ContractUpgraded(address,address)"(oldContract?: PromiseOrValue<string> | null, newContract?: PromiseOrValue<string> | null): ContractUpgradedEventFilter;
        ContractUpgraded(oldContract?: PromiseOrValue<string> | null, newContract?: PromiseOrValue<string> | null): ContractUpgradedEventFilter;
        "DeliverGasOverheadUpdated(uint256,uint256)"(oldGasOverhead?: PromiseOrValue<BigNumberish> | null, newGasOverhead?: PromiseOrValue<BigNumberish> | null): DeliverGasOverheadUpdatedEventFilter;
        DeliverGasOverheadUpdated(oldGasOverhead?: PromiseOrValue<BigNumberish> | null, newGasOverhead?: PromiseOrValue<BigNumberish> | null): DeliverGasOverheadUpdatedEventFilter;
        "OwnershipTransfered(address,address)"(oldOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferedEventFilter;
        OwnershipTransfered(oldOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferedEventFilter;
        "RewardAddressUpdated(address)"(newAddress?: PromiseOrValue<string> | null): RewardAddressUpdatedEventFilter;
        RewardAddressUpdated(newAddress?: PromiseOrValue<string> | null): RewardAddressUpdatedEventFilter;
        "TargetChainAddressUpdated(uint16,bytes32)"(targetChain?: PromiseOrValue<BigNumberish> | null, newAddress?: PromiseOrValue<BytesLike> | null): TargetChainAddressUpdatedEventFilter;
        TargetChainAddressUpdated(targetChain?: PromiseOrValue<BigNumberish> | null, newAddress?: PromiseOrValue<BytesLike> | null): TargetChainAddressUpdatedEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        "WormholeRelayerUpdated(address)"(coreRelayer?: null): WormholeRelayerUpdatedEventFilter;
        WormholeRelayerUpdated(coreRelayer?: null): WormholeRelayerUpdatedEventFilter;
    };
    estimateGas: {
        assetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        chainId(overrides?: CallOverrides): Promise<BigNumber>;
        confirmOwnershipTransferRequest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        coreRelayer(overrides?: CallOverrides): Promise<BigNumber>;
        deliverGasOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        gasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRewardAddress(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isInitialized(impl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        maximumBudget(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nativeCurrencyPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;
        pricingWallet(overrides?: CallOverrides): Promise<BigNumber>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteDeliveryOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteEvmDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteGasCost(targetChain: PromiseOrValue<BigNumberish>, gasAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteGasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        rewardAddress(overrides?: CallOverrides): Promise<BigNumber>;
        submitOwnershipTransferRequest(thisRelayerChainId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        updateAssetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, buffer: PromiseOrValue<BigNumberish>, bufferDenominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateAssetConversionBuffers(updates: DeliveryProviderStructs.AssetConversionBufferUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateConfig(updates: DeliveryProviderStructs.UpdateStruct[], coreConfig: DeliveryProviderStructs.CoreConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateDeliverGasOverhead(chainId: PromiseOrValue<BigNumberish>, newGasOverhead: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateDeliverGasOverheads(overheadUpdates: DeliveryProviderStructs.DeliverGasOverheadUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateMaximumBudget(targetChain: PromiseOrValue<BigNumberish>, maximumTotalBudget: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateMaximumBudgets(updates: DeliveryProviderStructs.MaximumBudgetUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePrice(updateChainId: PromiseOrValue<BigNumberish>, updateGasPrice: PromiseOrValue<BigNumberish>, updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePrices(updates: DeliveryProviderStructs.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePricingWallet(newPricingWallet: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateRewardAddress(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateSupportedChain(targetChain: PromiseOrValue<BigNumberish>, isSupported: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateSupportedChains(updates: DeliveryProviderStructs.SupportedChainUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, newAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateTargetChainAddresses(updates: DeliveryProviderStructs.TargetChainUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateWormholeRelayer(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgrade(deliveryProviderChainId: PromiseOrValue<BigNumberish>, newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        assetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        confirmOwnershipTransferRequest(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        coreRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliverGasOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        gasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRewardAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isInitialized(impl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maximumBudget(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeCurrencyPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pricingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteDeliveryOverhead(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteEvmDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteGasCost(targetChain: PromiseOrValue<BigNumberish>, gasAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteGasPrice(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        submitOwnershipTransferRequest(thisRelayerChainId: PromiseOrValue<BigNumberish>, newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateAssetConversionBuffer(targetChain: PromiseOrValue<BigNumberish>, buffer: PromiseOrValue<BigNumberish>, bufferDenominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateAssetConversionBuffers(updates: DeliveryProviderStructs.AssetConversionBufferUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateConfig(updates: DeliveryProviderStructs.UpdateStruct[], coreConfig: DeliveryProviderStructs.CoreConfigStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateDeliverGasOverhead(chainId: PromiseOrValue<BigNumberish>, newGasOverhead: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateDeliverGasOverheads(overheadUpdates: DeliveryProviderStructs.DeliverGasOverheadUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateMaximumBudget(targetChain: PromiseOrValue<BigNumberish>, maximumTotalBudget: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateMaximumBudgets(updates: DeliveryProviderStructs.MaximumBudgetUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePrice(updateChainId: PromiseOrValue<BigNumberish>, updateGasPrice: PromiseOrValue<BigNumberish>, updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePrices(updates: DeliveryProviderStructs.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePricingWallet(newPricingWallet: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateRewardAddress(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateSupportedChain(targetChain: PromiseOrValue<BigNumberish>, isSupported: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateSupportedChains(updates: DeliveryProviderStructs.SupportedChainUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, newAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateTargetChainAddresses(updates: DeliveryProviderStructs.TargetChainUpdateStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateWormholeRelayer(newAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgrade(deliveryProviderChainId: PromiseOrValue<BigNumberish>, newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
