import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface TestHelpersInterface extends utils.Interface {
    functions: {
        "registerWormholeRelayerContract(address,address,uint16,uint16,bytes32)": FunctionFragment;
        "setUpDeliveryProvider(uint16)": FunctionFragment;
        "setUpWormhole(uint16)": FunctionFragment;
        "setUpWormholeRelayer(address,address)": FunctionFragment;
        "vm()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "registerWormholeRelayerContract" | "setUpDeliveryProvider" | "setUpWormhole" | "setUpWormholeRelayer" | "vm"): FunctionFragment;
    encodeFunctionData(functionFragment: "registerWormholeRelayerContract", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setUpDeliveryProvider", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setUpWormhole", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setUpWormholeRelayer", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "vm", values?: undefined): string;
    decodeFunctionResult(functionFragment: "registerWormholeRelayerContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUpDeliveryProvider", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUpWormhole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUpWormholeRelayer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
    events: {};
}
export interface TestHelpers extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestHelpersInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        registerWormholeRelayerContract(governance: PromiseOrValue<string>, wormhole: PromiseOrValue<string>, currentChainId: PromiseOrValue<BigNumberish>, chainId: PromiseOrValue<BigNumberish>, coreRelayerContractAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUpDeliveryProvider(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUpWormhole(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUpWormholeRelayer(wormhole: PromiseOrValue<string>, defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        vm(overrides?: CallOverrides): Promise<[string]>;
    };
    registerWormholeRelayerContract(governance: PromiseOrValue<string>, wormhole: PromiseOrValue<string>, currentChainId: PromiseOrValue<BigNumberish>, chainId: PromiseOrValue<BigNumberish>, coreRelayerContractAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUpDeliveryProvider(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUpWormhole(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUpWormholeRelayer(wormhole: PromiseOrValue<string>, defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    vm(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        registerWormholeRelayerContract(governance: PromiseOrValue<string>, wormhole: PromiseOrValue<string>, currentChainId: PromiseOrValue<BigNumberish>, chainId: PromiseOrValue<BigNumberish>, coreRelayerContractAddress: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setUpDeliveryProvider(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        setUpWormhole(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            wormholeContract: string;
            wormholeSimulator: string;
        }>;
        setUpWormholeRelayer(wormhole: PromiseOrValue<string>, defaultDeliveryProvider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        vm(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        registerWormholeRelayerContract(governance: PromiseOrValue<string>, wormhole: PromiseOrValue<string>, currentChainId: PromiseOrValue<BigNumberish>, chainId: PromiseOrValue<BigNumberish>, coreRelayerContractAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUpDeliveryProvider(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUpWormhole(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUpWormholeRelayer(wormhole: PromiseOrValue<string>, defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        vm(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        registerWormholeRelayerContract(governance: PromiseOrValue<string>, wormhole: PromiseOrValue<string>, currentChainId: PromiseOrValue<BigNumberish>, chainId: PromiseOrValue<BigNumberish>, coreRelayerContractAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUpDeliveryProvider(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUpWormhole(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUpWormholeRelayer(wormhole: PromiseOrValue<string>, defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
