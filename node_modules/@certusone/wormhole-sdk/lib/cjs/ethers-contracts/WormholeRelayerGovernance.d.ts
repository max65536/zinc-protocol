import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface WormholeRelayerGovernanceInterface extends utils.Interface {
    functions: {
        "checkAndExecuteUpgradeMigration()": FunctionFragment;
        "deliveryAttempted(bytes32)": FunctionFragment;
        "deliveryFailureBlock(bytes32)": FunctionFragment;
        "deliverySuccessBlock(bytes32)": FunctionFragment;
        "getRegisteredWormholeRelayerContract(uint16)": FunctionFragment;
        "registerWormholeRelayerContract(bytes)": FunctionFragment;
        "setDefaultDeliveryProvider(bytes)": FunctionFragment;
        "submitContractUpgrade(bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "checkAndExecuteUpgradeMigration" | "deliveryAttempted" | "deliveryFailureBlock" | "deliverySuccessBlock" | "getRegisteredWormholeRelayerContract" | "registerWormholeRelayerContract" | "setDefaultDeliveryProvider" | "submitContractUpgrade"): FunctionFragment;
    encodeFunctionData(functionFragment: "checkAndExecuteUpgradeMigration", values?: undefined): string;
    encodeFunctionData(functionFragment: "deliveryAttempted", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliveryFailureBlock", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliverySuccessBlock", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRegisteredWormholeRelayerContract", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerWormholeRelayerContract", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setDefaultDeliveryProvider", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "submitContractUpgrade", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "checkAndExecuteUpgradeMigration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliveryAttempted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliveryFailureBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverySuccessBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredWormholeRelayerContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerWormholeRelayerContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultDeliveryProvider", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitContractUpgrade", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "ContractUpgraded(address,address)": EventFragment;
        "SendEvent(uint64,uint256,uint256)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendEvent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
export interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
export declare type AdminChangedEvent = TypedEvent<[
    string,
    string
], AdminChangedEventObject>;
export declare type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
export interface BeaconUpgradedEventObject {
    beacon: string;
}
export declare type BeaconUpgradedEvent = TypedEvent<[
    string
], BeaconUpgradedEventObject>;
export declare type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
export interface ContractUpgradedEventObject {
    oldContract: string;
    newContract: string;
}
export declare type ContractUpgradedEvent = TypedEvent<[
    string,
    string
], ContractUpgradedEventObject>;
export declare type ContractUpgradedEventFilter = TypedEventFilter<ContractUpgradedEvent>;
export interface SendEventEventObject {
    sequence: BigNumber;
    deliveryQuote: BigNumber;
    paymentForExtraReceiverValue: BigNumber;
}
export declare type SendEventEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber
], SendEventEventObject>;
export declare type SendEventEventFilter = TypedEventFilter<SendEventEvent>;
export interface UpgradedEventObject {
    implementation: string;
}
export declare type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
export declare type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
export interface WormholeRelayerGovernance extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WormholeRelayerGovernanceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkAndExecuteUpgradeMigration(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            attempted: boolean;
        }>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            blockNumber: BigNumber;
        }>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            blockNumber: BigNumber;
        }>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    checkAndExecuteUpgradeMigration(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        checkAndExecuteUpgradeMigration(overrides?: CallOverrides): Promise<void>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        "ContractUpgraded(address,address)"(oldContract?: PromiseOrValue<string> | null, newContract?: PromiseOrValue<string> | null): ContractUpgradedEventFilter;
        ContractUpgraded(oldContract?: PromiseOrValue<string> | null, newContract?: PromiseOrValue<string> | null): ContractUpgradedEventFilter;
        "SendEvent(uint64,uint256,uint256)"(sequence?: PromiseOrValue<BigNumberish> | null, deliveryQuote?: null, paymentForExtraReceiverValue?: null): SendEventEventFilter;
        SendEvent(sequence?: PromiseOrValue<BigNumberish> | null, deliveryQuote?: null, paymentForExtraReceiverValue?: null): SendEventEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };
    estimateGas: {
        checkAndExecuteUpgradeMigration(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        checkAndExecuteUpgradeMigration(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
