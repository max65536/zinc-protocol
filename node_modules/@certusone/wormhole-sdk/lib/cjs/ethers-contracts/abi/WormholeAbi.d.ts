/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WormholeAbiInterface extends ethers.utils.Interface {
  functions: {
    "consumedVAAs(bytes32)": FunctionFragment;
    "getGuardianSet(uint32)": FunctionFragment;
    "guardian_set_expirity()": FunctionFragment;
    "guardian_set_index()": FunctionFragment;
    "guardian_sets(uint32)": FunctionFragment;
    "isWrappedAsset(address)": FunctionFragment;
    "lockAssets(address,uint256,bytes32,uint8,uint32,bool)": FunctionFragment;
    "lockETH(bytes32,uint8,uint32)": FunctionFragment;
    "parseAndVerifyVAA(bytes)": FunctionFragment;
    "submitVAA(bytes)": FunctionFragment;
    "wrappedAssetMaster()": FunctionFragment;
    "wrappedAssets(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "consumedVAAs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardianSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "guardian_set_expirity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardian_set_index",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardian_sets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWrappedAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockAssets",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockETH",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyVAA",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVAA",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAssetMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAssets",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "consumedVAAs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardianSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardian_set_expirity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardian_set_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardian_sets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyVAA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVAA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAssetMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAssets",
    data: BytesLike
  ): Result;

  events: {
    "LogGuardianSetChanged(uint32,uint32)": EventFragment;
    "LogTokensLocked(uint8,uint8,uint8,bytes32,bytes32,bytes32,uint256,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogGuardianSetChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokensLocked"): EventFragment;
}

export class WormholeAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WormholeAbiInterface;

  functions: {
    consumedVAAs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getGuardianSet(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string[], number] & { keys: string[]; expiration_time: number }] & {
        gs: [string[], number] & { keys: string[]; expiration_time: number };
      }
    >;

    guardian_set_expirity(overrides?: CallOverrides): Promise<[number]>;

    guardian_set_index(overrides?: CallOverrides): Promise<[number]>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { expiration_time: number }>;

    isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockETH(
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseAndVerifyVAA(
      vaa: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, number, number, number, string] & {
          version: number;
          hash: string;
          guardian_set_index: number;
          timestamp: number;
          action: number;
          payload: string;
        }
      ] & {
        parsed_vaa: [number, string, number, number, number, string] & {
          version: number;
          hash: string;
          guardian_set_index: number;
          timestamp: number;
          action: number;
          payload: string;
        };
      }
    >;

    submitVAA(
      vaa: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedAssetMaster(overrides?: CallOverrides): Promise<[string]>;

    wrappedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  consumedVAAs(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getGuardianSet(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], number] & { keys: string[]; expiration_time: number }>;

  guardian_set_expirity(overrides?: CallOverrides): Promise<number>;

  guardian_set_index(overrides?: CallOverrides): Promise<number>;

  guardian_sets(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lockAssets(
    asset: string,
    amount: BigNumberish,
    recipient: BytesLike,
    target_chain: BigNumberish,
    nonce: BigNumberish,
    refund_dust: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockETH(
    recipient: BytesLike,
    target_chain: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseAndVerifyVAA(
    vaa: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, number, number, string] & {
      version: number;
      hash: string;
      guardian_set_index: number;
      timestamp: number;
      action: number;
      payload: string;
    }
  >;

  submitVAA(
    vaa: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedAssetMaster(overrides?: CallOverrides): Promise<string>;

  wrappedAssets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    consumedVAAs(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getGuardianSet(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number] & { keys: string[]; expiration_time: number }
    >;

    guardian_set_expirity(overrides?: CallOverrides): Promise<number>;

    guardian_set_index(overrides?: CallOverrides): Promise<number>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    lockETH(
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    parseAndVerifyVAA(
      vaa: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, number, string] & {
        version: number;
        hash: string;
        guardian_set_index: number;
        timestamp: number;
        action: number;
        payload: string;
      }
    >;

    submitVAA(vaa: BytesLike, overrides?: CallOverrides): Promise<void>;

    wrappedAssetMaster(overrides?: CallOverrides): Promise<string>;

    wrappedAssets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LogGuardianSetChanged(
      oldGuardianIndex?: null,
      newGuardianIndex?: null
    ): TypedEventFilter<
      [number, number],
      { oldGuardianIndex: number; newGuardianIndex: number }
    >;

    LogTokensLocked(
      target_chain?: null,
      token_chain?: null,
      token_decimals?: null,
      token?: BytesLike | null,
      sender?: BytesLike | null,
      recipient?: null,
      amount?: null,
      nonce?: null
    ): TypedEventFilter<
      [number, number, number, string, string, string, BigNumber, number],
      {
        target_chain: number;
        token_chain: number;
        token_decimals: number;
        token: string;
        sender: string;
        recipient: string;
        amount: BigNumber;
        nonce: number;
      }
    >;
  };

  estimateGas: {
    consumedVAAs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuardianSet(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian_set_expirity(overrides?: CallOverrides): Promise<BigNumber>;

    guardian_set_index(overrides?: CallOverrides): Promise<BigNumber>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockETH(
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseAndVerifyVAA(
      vaa: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitVAA(
      vaa: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedAssetMaster(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumedVAAs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuardianSet(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian_set_expirity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian_set_index(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWrappedAsset(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockETH(
      recipient: BytesLike,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseAndVerifyVAA(
      vaa: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitVAA(
      vaa: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedAssetMaster(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrappedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
