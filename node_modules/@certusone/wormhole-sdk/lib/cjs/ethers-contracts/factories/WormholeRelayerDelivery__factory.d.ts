import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { WormholeRelayerDelivery, WormholeRelayerDeliveryInterface } from "../WormholeRelayerDelivery";
export declare class WormholeRelayerDelivery__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "Gas";
            readonly name: "gasUsed";
            readonly type: "uint256";
        }, {
            readonly internalType: "LocalNative";
            readonly name: "available";
            readonly type: "uint256";
        }, {
            readonly internalType: "LocalNative";
            readonly name: "required";
            readonly type: "uint256";
        }];
        readonly name: "Cancelled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DeliveryProviderCannotReceivePayment";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "Gas";
            readonly name: "gasUsed";
            readonly type: "uint256";
        }];
        readonly name: "DeliveryProviderPaymentFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "Gas";
            readonly name: "gasUsed";
            readonly type: "uint256";
        }];
        readonly name: "DeliveryProviderReverted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "LocalNative";
            readonly name: "msgValue";
            readonly type: "uint256";
        }, {
            readonly internalType: "LocalNative";
            readonly name: "minimum";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientRelayerFunds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly name: "InvalidDeliveryVaa";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "emitter";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "registered";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }];
        readonly name: "InvalidEmitter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOverrideGasLimit";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOverrideReceiverValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOverrideRefundPerGasUnused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "parsed";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "expected";
            readonly type: "uint8";
        }];
        readonly name: "InvalidPayloadId";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "received";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }];
        readonly name: "InvalidPayloadLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "NotAnEvmAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "msgSender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "lockedBy";
            readonly type: "address";
        }];
        readonly name: "ReentrantDelivery";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RequesterNotWormholeRelayer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "targetChain";
            readonly type: "uint16";
        }];
        readonly name: "TargetChainIsNotThisChain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "expectedVersion";
            readonly type: "uint8";
        }];
        readonly name: "UnexpectedExecutionInfoVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "index";
            readonly type: "uint8";
        }];
        readonly name: "VaaKeysDoNotMatchVaas";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "keys";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "vaas";
            readonly type: "uint256";
        }];
        readonly name: "VaaKeysLengthDoesNotMatchVaasLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "instructionVersion";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "overrideVersion";
            readonly type: "uint8";
        }];
        readonly name: "VersionMismatchOverride";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "recipientContract";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "sourceChain";
            readonly type: "uint16";
        }, {
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "deliveryVaaHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "enum IWormholeRelayerDelivery.DeliveryStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "Gas";
            readonly name: "gasUsed";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "enum IWormholeRelayerDelivery.RefundStatus";
            readonly name: "refundStatus";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "additionalStatusInfo";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "overridesInfo";
            readonly type: "bytes";
        }];
        readonly name: "Delivery";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "LocalNative";
            readonly name: "deliveryQuote";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "LocalNative";
            readonly name: "paymentForExtraReceiverValue";
            readonly type: "uint256";
        }];
        readonly name: "SendEvent";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes[]";
            readonly name: "encodedVMs";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedDeliveryVAA";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "relayerRefundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "deliveryOverrides";
            readonly type: "bytes";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "deliveryHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliveryAttempted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "attempted";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "deliveryHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliveryFailureBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "deliveryHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliverySuccessBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "sourceChain";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "targetAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }, {
                readonly internalType: "Gas";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "TargetNative";
                readonly name: "totalReceiverValue";
                readonly type: "uint256";
            }, {
                readonly internalType: "GasPrice";
                readonly name: "targetChainRefundPerGasUnused";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "senderAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "deliveryHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "signedVaas";
                readonly type: "bytes[]";
            }];
            readonly internalType: "struct EvmDeliveryInstruction";
            readonly name: "evmInstruction";
            readonly type: "tuple";
        }];
        readonly name: "executeInstruction";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly internalType: "Gas";
            readonly name: "gasUsed";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "targetRevertDataTruncated";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }];
        readonly name: "getRegisteredWormholeRelayerContract";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WormholeRelayerDeliveryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): WormholeRelayerDelivery;
}
