/// <reference types="node" />
import { PublicKeyInitData } from "@solana/web3.js";
import { MockEmitter } from "./wormhole";
export declare class MockTokenBridge extends MockEmitter {
    consistencyLevel: number;
    constructor(emitterAddress: string, chain: number, consistencyLevel: number, startSequence?: number);
    publishTokenBridgeMessage(serialized: Buffer, nonce?: number, timestamp?: number, uptickSequence?: boolean): Buffer;
    publishAttestMeta(tokenAddress: string, decimals: number, symbol: string, name: string, nonce?: number, timestamp?: number, uptickSequence?: boolean): Buffer;
    serializeTransferOnly(withPayload: boolean, tokenAddress: string, tokenChain: number, amount: bigint, recipientChain: number, recipient: string, fee?: bigint, fromAddress?: Buffer): Buffer;
    publishTransferTokens(tokenAddress: string, tokenChain: number, amount: bigint, recipientChain: number, recipient: string, fee: bigint, nonce?: number, timestamp?: number, uptickSequence?: boolean): Buffer;
    publishTransferTokensWithPayload(tokenAddress: string, tokenChain: number, amount: bigint, recipientChain: number, recipient: string, fromAddress: Buffer, payload: Buffer, nonce?: number, timestamp?: number, uptickSequence?: boolean): Buffer;
}
export declare class MockEthereumTokenBridge extends MockTokenBridge {
    constructor(emitterAddress: string, startSequence?: number);
    publishAttestMeta(tokenAddress: string, decimals: number, symbol: string, name: string, nonce?: number, timestamp?: number, uptickSequence?: boolean): Buffer;
}
export declare class MockSolanaTokenBridge extends MockTokenBridge {
    constructor(emitterAddress: PublicKeyInitData);
    publishAttestMeta(mint: PublicKeyInitData, decimals: number, symbol?: string, name?: string, nonce?: number, timestamp?: number, uptickSequence?: boolean): Buffer;
}
