import { Commitment, Connection, PublicKeyInitData } from "@solana/web3.js";
import { AptosClient } from "aptos";
import { ethers } from "ethers";
/**
 * Returns whether or not an asset address on Ethereum is a wormhole wrapped asset
 * @param nftBridgeAddress
 * @param provider
 * @param assetAddress
 * @returns
 */
export declare function getIsWrappedAssetEth(nftBridgeAddress: string, provider: ethers.Signer | ethers.providers.Provider, assetAddress: string): Promise<boolean>;
/**
 * Returns whether or not an asset on Solana is a wormhole wrapped asset
 * @param connection
 * @param nftBridgeAddress
 * @param mintAddress
 * @param [commitment]
 * @returns
 */
export declare function getIsWrappedAssetSolana(connection: Connection, nftBridgeAddress: PublicKeyInitData, mintAddress: PublicKeyInitData, commitment?: Commitment): Promise<boolean>;
export declare const getIsWrappedAssetSol: typeof getIsWrappedAssetSolana;
export declare function getIsWrappedAssetAptos(client: AptosClient, nftBridgeAddress: string, creatorAddress: string): Promise<boolean>;
