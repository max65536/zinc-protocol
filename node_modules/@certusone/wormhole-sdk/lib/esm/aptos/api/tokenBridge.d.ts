import { AptosClient, TxnBuilderTypes, Types } from "aptos";
import { ChainId, ChainName } from "../../utils";
export declare const attestToken: (tokenBridgeAddress: string, tokenChain: ChainId | ChainName, tokenAddress: string) => Types.EntryFunctionPayload;
export declare const completeTransfer: (client: AptosClient, tokenBridgeAddress: string, transferVAA: Uint8Array, feeRecipient: string) => Promise<Types.EntryFunctionPayload>;
export declare const completeTransferAndRegister: (client: AptosClient, tokenBridgeAddress: string, transferVAA: Uint8Array) => Promise<Types.EntryFunctionPayload>;
export declare const completeTransferWithPayload: (_tokenBridgeAddress: string, _tokenChain: ChainId | ChainName, _tokenAddress: string, _vaa: Uint8Array) => Types.EntryFunctionPayload;
/**
 * Construct a payload for a transaction that registers a coin defined by the given origin chain
 * ID and address to the sender's account.
 *
 * The bytecode was compiled from the following Move code:
 * ```move
 * script {
 *   use aptos_framework::coin;
 *   use aptos_framework::signer;
 *
 *   fun main<CoinType>(user: &signer) {
 *     if (!coin::is_account_registered<CoinType>(signer::address_of(user))) {
 *       coin::register<CoinType>(user);
 *     };
 *   }
 * }
 * ```
 * @param tokenBridgeAddress Address of token bridge
 * @param originChain Origin chain ID of asset
 * @param originAddress Asset address on origin chain
 * @returns Transaction payload
 */
export declare const registerCoin: (tokenBridgeAddress: string, originChain: ChainId | ChainName, originAddress: string) => TxnBuilderTypes.TransactionPayloadScript;
export declare const deployCoin: (tokenBridgeAddress: string) => Types.EntryFunctionPayload;
export declare const registerChain: (tokenBridgeAddress: string, vaa: Uint8Array) => Types.EntryFunctionPayload;
export declare const transferTokens: (tokenBridgeAddress: string, fullyQualifiedType: string, amount: string, recipientChain: ChainId | ChainName, recipient: Uint8Array, relayerFee: string, nonce: number) => Types.EntryFunctionPayload;
export declare const transferTokensWithPayload: (tokenBridgeAddress: string, fullyQualifiedType: string, amount: string, recipientChain: ChainId | ChainName, recipient: Uint8Array, nonce: number, payload: Uint8Array) => Types.EntryFunctionPayload;
export declare const createWrappedCoinType: (tokenBridgeAddress: string, vaa: Uint8Array) => Types.EntryFunctionPayload;
export declare const createWrappedCoin: (tokenBridgeAddress: string, attestVAA: Uint8Array) => Types.EntryFunctionPayload;
