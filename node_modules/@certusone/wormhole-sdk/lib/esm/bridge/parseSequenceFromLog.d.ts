import { TransactionResponse, VersionedTransactionResponse } from "@solana/web3.js";
import { TxInfo } from "@terra-money/terra.js";
import { TxInfo as XplaTxInfo } from "@xpla/xpla.js";
import { Types } from "aptos";
import { ContractReceipt } from "ethers";
import { FinalExecutionOutcome } from "near-api-js/lib/providers";
import { SuiTransactionBlockResponse } from "@mysten/sui.js";
export declare function parseSequenceFromLogEth(receipt: ContractReceipt, bridgeAddress: string): string;
export declare function parseSequencesFromLogEth(receipt: ContractReceipt, bridgeAddress: string): string[];
export declare function parseSequenceFromLogTerra(info: TxInfo): string;
export declare function parseSequenceFromLogXpla(info: XplaTxInfo): string;
export declare function parseSequencesFromLogTerra(info: TxInfo): string[];
export declare function parseSequenceFromLogInjective(info: any): string;
export declare function parseSequenceFromLogSolana(info: TransactionResponse | VersionedTransactionResponse): string;
export declare function parseSequencesFromLogSolana(info: TransactionResponse): string[] | undefined;
export declare function parseSequenceFromLogAlgorand(result: Record<string, any>): string;
export declare function parseSequenceFromLogNear(outcome: FinalExecutionOutcome): string | null;
/**
 * Given a transaction result, return the first WormholeMessage event sequence
 * @param coreBridgeAddress Wormhole Core bridge address
 * @param result the result of client.waitForTransactionWithResult(txHash)
 * @returns sequence
 */
export declare function parseSequenceFromLogAptos(coreBridgeAddress: string, result: Types.UserTransaction): string | null;
export declare function parseSequenceFromLogSui(originalCoreBridgePackageId: string, response: SuiTransactionBlockResponse): string | null;
