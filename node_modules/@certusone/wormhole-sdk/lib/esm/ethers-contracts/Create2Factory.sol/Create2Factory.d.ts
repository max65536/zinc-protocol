import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface Create2FactoryInterface extends utils.Interface {
    functions: {
        "computeAddress(address,bytes,bytes32)": FunctionFragment;
        "computeProxyAddress(address,bytes)": FunctionFragment;
        "create2(bytes,bytes)": FunctionFragment;
        "create2Proxy(bytes,address,bytes)": FunctionFragment;
        "init()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "computeAddress" | "computeProxyAddress" | "create2" | "create2Proxy" | "init"): FunctionFragment;
    encodeFunctionData(functionFragment: "computeAddress", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "computeProxyAddress", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "create2", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "create2Proxy", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "init", values?: undefined): string;
    decodeFunctionResult(functionFragment: "computeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "computeProxyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "create2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "create2Proxy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
    events: {
        "Created(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
}
export interface CreatedEventObject {
    addr: string;
}
export declare type CreatedEvent = TypedEvent<[string], CreatedEventObject>;
export declare type CreatedEventFilter = TypedEventFilter<CreatedEvent>;
export interface Create2Factory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: Create2FactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        computeAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, bytecodeHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        computeProxyAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        create2(userSalt: PromiseOrValue<BytesLike>, bytecode: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        create2Proxy(userSalt: PromiseOrValue<BytesLike>, impl: PromiseOrValue<string>, call: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        init(overrides?: CallOverrides): Promise<[string]>;
    };
    computeAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, bytecodeHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    computeProxyAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    create2(userSalt: PromiseOrValue<BytesLike>, bytecode: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    create2Proxy(userSalt: PromiseOrValue<BytesLike>, impl: PromiseOrValue<string>, call: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    init(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        computeAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, bytecodeHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        computeProxyAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        create2(userSalt: PromiseOrValue<BytesLike>, bytecode: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        create2Proxy(userSalt: PromiseOrValue<BytesLike>, impl: PromiseOrValue<string>, call: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        init(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Created(address)"(addr?: null): CreatedEventFilter;
        Created(addr?: null): CreatedEventFilter;
    };
    estimateGas: {
        computeAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, bytecodeHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        computeProxyAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        create2(userSalt: PromiseOrValue<BytesLike>, bytecode: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        create2Proxy(userSalt: PromiseOrValue<BytesLike>, impl: PromiseOrValue<string>, call: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        init(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        computeAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, bytecodeHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        computeProxyAddress(creator: PromiseOrValue<string>, userSalt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        create2(userSalt: PromiseOrValue<BytesLike>, bytecode: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        create2Proxy(userSalt: PromiseOrValue<BytesLike>, impl: PromiseOrValue<string>, call: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        init(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
