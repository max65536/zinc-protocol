import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface IDeliveryProviderInterface extends utils.Interface {
    functions: {
        "getRewardAddress()": FunctionFragment;
        "getTargetChainAddress(uint16)": FunctionFragment;
        "isChainSupported(uint16)": FunctionFragment;
        "quoteAssetConversion(uint16,uint256)": FunctionFragment;
        "quoteDeliveryPrice(uint16,uint256,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getRewardAddress" | "getTargetChainAddress" | "isChainSupported" | "quoteAssetConversion" | "quoteDeliveryPrice"): FunctionFragment;
    encodeFunctionData(functionFragment: "getRewardAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTargetChainAddress", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isChainSupported", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "quoteAssetConversion", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "quoteDeliveryPrice", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getRewardAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTargetChainAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isChainSupported", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteAssetConversion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteDeliveryPrice", data: BytesLike): Result;
    events: {};
}
export interface IDeliveryProvider extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDeliveryProviderInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getRewardAddress(overrides?: CallOverrides): Promise<[string] & {
            rewardAddress: string;
        }>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            deliveryProviderAddress: string;
        }>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean] & {
            supported: boolean;
        }>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            targetChainAmount: BigNumber;
        }>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            nativePriceQuote: BigNumber;
            encodedExecutionInfo: string;
        }>;
    };
    getRewardAddress(overrides?: CallOverrides): Promise<string>;
    getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        string
    ] & {
        nativePriceQuote: BigNumber;
        encodedExecutionInfo: string;
    }>;
    callStatic: {
        getRewardAddress(overrides?: CallOverrides): Promise<string>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            nativePriceQuote: BigNumber;
            encodedExecutionInfo: string;
        }>;
    };
    filters: {};
    estimateGas: {
        getRewardAddress(overrides?: CallOverrides): Promise<BigNumber>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getRewardAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTargetChainAddress(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isChainSupported(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteAssetConversion(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
