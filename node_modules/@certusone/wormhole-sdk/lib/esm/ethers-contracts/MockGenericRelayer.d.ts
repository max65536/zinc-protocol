import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace VmSafe {
    type LogStruct = {
        topics: PromiseOrValue<BytesLike>[];
        data: PromiseOrValue<BytesLike>;
        emitter: PromiseOrValue<string>;
    };
    type LogStructOutput = [string[], string, string] & {
        topics: string[];
        data: string;
        emitter: string;
    };
}
export interface MockGenericRelayerInterface extends utils.Interface {
    functions: {
        "getPastDeliveryVAA(uint16,uint64)": FunctionFragment;
        "getPastEncodedVMs(uint16,uint64)": FunctionFragment;
        "relay((bytes32[],bytes,address)[],uint16,bytes)": FunctionFragment;
        "relay(uint16,bytes)": FunctionFragment;
        "relay(uint16)": FunctionFragment;
        "setProviderDeliveryAddress(uint16,address)": FunctionFragment;
        "setWormholeRelayerContract(uint16,address)": FunctionFragment;
        "vm()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getPastDeliveryVAA" | "getPastEncodedVMs" | "relay((bytes32[],bytes,address)[],uint16,bytes)" | "relay(uint16,bytes)" | "relay(uint16)" | "setProviderDeliveryAddress" | "setWormholeRelayerContract" | "vm"): FunctionFragment;
    encodeFunctionData(functionFragment: "getPastDeliveryVAA", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPastEncodedVMs", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "relay((bytes32[],bytes,address)[],uint16,bytes)", values: [
        VmSafe.LogStruct[],
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "relay(uint16,bytes)", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "relay(uint16)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setProviderDeliveryAddress", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setWormholeRelayerContract", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "vm", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getPastDeliveryVAA", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPastEncodedVMs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relay((bytes32[],bytes,address)[],uint16,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relay(uint16,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "relay(uint16)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setProviderDeliveryAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWormholeRelayerContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
    events: {};
}
export interface MockGenericRelayer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockGenericRelayerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getPastDeliveryVAA(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getPastEncodedVMs(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[]]>;
        "relay((bytes32[],bytes,address)[],uint16,bytes)"(logs: VmSafe.LogStruct[], chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "relay(uint16,bytes)"(chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "relay(uint16)"(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setProviderDeliveryAddress(chainId: PromiseOrValue<BigNumberish>, deliveryAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, contractAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        vm(overrides?: CallOverrides): Promise<[string]>;
    };
    getPastDeliveryVAA(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getPastEncodedVMs(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
    "relay((bytes32[],bytes,address)[],uint16,bytes)"(logs: VmSafe.LogStruct[], chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "relay(uint16,bytes)"(chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "relay(uint16)"(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setProviderDeliveryAddress(chainId: PromiseOrValue<BigNumberish>, deliveryAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, contractAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    vm(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        getPastDeliveryVAA(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getPastEncodedVMs(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
        "relay((bytes32[],bytes,address)[],uint16,bytes)"(logs: VmSafe.LogStruct[], chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "relay(uint16,bytes)"(chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        "relay(uint16)"(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setProviderDeliveryAddress(chainId: PromiseOrValue<BigNumberish>, deliveryAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, contractAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        vm(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        getPastDeliveryVAA(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPastEncodedVMs(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "relay((bytes32[],bytes,address)[],uint16,bytes)"(logs: VmSafe.LogStruct[], chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "relay(uint16,bytes)"(chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "relay(uint16)"(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setProviderDeliveryAddress(chainId: PromiseOrValue<BigNumberish>, deliveryAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, contractAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        vm(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getPastDeliveryVAA(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPastEncodedVMs(chainId: PromiseOrValue<BigNumberish>, deliveryVAASequence: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "relay((bytes32[],bytes,address)[],uint16,bytes)"(logs: VmSafe.LogStruct[], chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "relay(uint16,bytes)"(chainId: PromiseOrValue<BigNumberish>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "relay(uint16)"(chainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setProviderDeliveryAddress(chainId: PromiseOrValue<BigNumberish>, deliveryAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, contractAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
