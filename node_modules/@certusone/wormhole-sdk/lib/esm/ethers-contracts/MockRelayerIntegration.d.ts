import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare type DeliveryDataStruct = {
    sourceAddress: PromiseOrValue<BytesLike>;
    sourceChain: PromiseOrValue<BigNumberish>;
    deliveryHash: PromiseOrValue<BytesLike>;
    payload: PromiseOrValue<BytesLike>;
    additionalVaas: PromiseOrValue<BytesLike>[];
};
export declare type DeliveryDataStructOutput = [
    string,
    number,
    string,
    string,
    string[]
] & {
    sourceAddress: string;
    sourceChain: number;
    deliveryHash: string;
    payload: string;
    additionalVaas: string[];
};
export declare type XAddressStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<BytesLike>;
};
export declare type XAddressStructOutput = [number, string] & {
    chainId: number;
    addr: string;
};
export declare type VaaKeyStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
};
export declare type VaaKeyStructOutput = [number, string, BigNumber] & {
    chainId: number;
    emitterAddress: string;
    sequence: BigNumber;
};
export declare namespace MockRelayerIntegration {
    type MessageStruct = {
        version: PromiseOrValue<BigNumberish>;
        message: PromiseOrValue<BytesLike>;
        forwardMessage: PromiseOrValue<BytesLike>;
    };
    type MessageStructOutput = [number, string, string] & {
        version: number;
        message: string;
        forwardMessage: string;
    };
}
export interface MockRelayerIntegrationInterface extends utils.Interface {
    functions: {
        "emitterAddress()": FunctionFragment;
        "encodeMessage((uint8,bytes,bytes))": FunctionFragment;
        "getDeliveryData()": FunctionFragment;
        "getMessage()": FunctionFragment;
        "getMessageHistory()": FunctionFragment;
        "getRegisteredContract(uint16)": FunctionFragment;
        "getRegisteredContractAddress(uint16)": FunctionFragment;
        "receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)": FunctionFragment;
        "registerEmitter(uint16,bytes32)": FunctionFragment;
        "registerEmitters((uint16,bytes32)[])": FunctionFragment;
        "resend(uint16,uint64,uint16,uint32,uint128)": FunctionFragment;
        "sendMessage(bytes,uint16,uint32,uint128)": FunctionFragment;
        "sendMessageWithAdditionalVaas(bytes,uint16,uint32,uint128,(uint16,bytes32,uint64)[])": FunctionFragment;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)": FunctionFragment;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)": FunctionFragment;
        "sendMessageWithMultiForwardedResponse(bytes,bytes,uint16,uint32,uint128)": FunctionFragment;
        "sendMessageWithRefund(bytes,uint16,uint32,uint128,uint16,address)": FunctionFragment;
        "sendToEvm(uint16,address,uint32,uint16,address,uint128,uint256,bytes,(uint16,bytes32,uint64)[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "emitterAddress" | "encodeMessage" | "getDeliveryData" | "getMessage" | "getMessageHistory" | "getRegisteredContract" | "getRegisteredContractAddress" | "receiveWormholeMessages" | "registerEmitter" | "registerEmitters" | "resend" | "sendMessage" | "sendMessageWithAdditionalVaas" | "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)" | "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)" | "sendMessageWithMultiForwardedResponse" | "sendMessageWithRefund" | "sendToEvm"): FunctionFragment;
    encodeFunctionData(functionFragment: "emitterAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "encodeMessage", values: [MockRelayerIntegration.MessageStruct]): string;
    encodeFunctionData(functionFragment: "getDeliveryData", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMessageHistory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRegisteredContract", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredContractAddress", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "receiveWormholeMessages", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "registerEmitter", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "registerEmitters", values: [XAddressStruct[]]): string;
    encodeFunctionData(functionFragment: "resend", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendMessage", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendMessageWithAdditionalVaas", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        VaaKeyStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendMessageWithMultiForwardedResponse", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendMessageWithRefund", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendToEvm", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        VaaKeyStruct[]
    ]): string;
    decodeFunctionResult(functionFragment: "emitterAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "encodeMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDeliveryData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMessageHistory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredContractAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveWormholeMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerEmitter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerEmitters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithAdditionalVaas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithMultiForwardedResponse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithRefund", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendToEvm", data: BytesLike): Result;
    events: {};
}
export interface MockRelayerIntegration extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockRelayerIntegrationInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        emitterAddress(overrides?: CallOverrides): Promise<[string]>;
        encodeMessage(message: MockRelayerIntegration.MessageStruct, overrides?: CallOverrides): Promise<[string] & {
            encoded: string;
        }>;
        getDeliveryData(overrides?: CallOverrides): Promise<[
            DeliveryDataStructOutput
        ] & {
            deliveryData: DeliveryDataStructOutput;
        }>;
        getMessage(overrides?: CallOverrides): Promise<[string]>;
        getMessageHistory(overrides?: CallOverrides): Promise<[string[]]>;
        getRegisteredContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getRegisteredContractAddress(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        receiveWormholeMessages(payload: PromiseOrValue<BytesLike>, additionalVaas: PromiseOrValue<BytesLike>[], sourceAddress: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<BigNumberish>, deliveryHash: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerEmitter(chainId: PromiseOrValue<BigNumberish>, emitterAddress_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerEmitters(emitters: XAddressStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resend(chainId: PromiseOrValue<BigNumberish>, sequence: PromiseOrValue<BigNumberish>, targetChain: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendMessage(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendMessageWithAdditionalVaas(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendMessageWithMultiForwardedResponse(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendMessageWithRefund(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, destination: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    emitterAddress(overrides?: CallOverrides): Promise<string>;
    encodeMessage(message: MockRelayerIntegration.MessageStruct, overrides?: CallOverrides): Promise<string>;
    getDeliveryData(overrides?: CallOverrides): Promise<DeliveryDataStructOutput>;
    getMessage(overrides?: CallOverrides): Promise<string>;
    getMessageHistory(overrides?: CallOverrides): Promise<string[]>;
    getRegisteredContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getRegisteredContractAddress(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    receiveWormholeMessages(payload: PromiseOrValue<BytesLike>, additionalVaas: PromiseOrValue<BytesLike>[], sourceAddress: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<BigNumberish>, deliveryHash: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerEmitter(chainId: PromiseOrValue<BigNumberish>, emitterAddress_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerEmitters(emitters: XAddressStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resend(chainId: PromiseOrValue<BigNumberish>, sequence: PromiseOrValue<BigNumberish>, targetChain: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendMessage(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendMessageWithAdditionalVaas(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendMessageWithMultiForwardedResponse(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendMessageWithRefund(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendToEvm(targetChain: PromiseOrValue<BigNumberish>, destination: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        emitterAddress(overrides?: CallOverrides): Promise<string>;
        encodeMessage(message: MockRelayerIntegration.MessageStruct, overrides?: CallOverrides): Promise<string>;
        getDeliveryData(overrides?: CallOverrides): Promise<DeliveryDataStructOutput>;
        getMessage(overrides?: CallOverrides): Promise<string>;
        getMessageHistory(overrides?: CallOverrides): Promise<string[]>;
        getRegisteredContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getRegisteredContractAddress(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        receiveWormholeMessages(payload: PromiseOrValue<BytesLike>, additionalVaas: PromiseOrValue<BytesLike>[], sourceAddress: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<BigNumberish>, deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        registerEmitter(chainId: PromiseOrValue<BigNumberish>, emitterAddress_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        registerEmitters(emitters: XAddressStruct[], overrides?: CallOverrides): Promise<void>;
        resend(chainId: PromiseOrValue<BigNumberish>, sequence: PromiseOrValue<BigNumberish>, targetChain: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        sendMessage(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        sendMessageWithAdditionalVaas(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sendMessageWithMultiForwardedResponse(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        sendMessageWithRefund(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, destination: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, vaaKeys: VaaKeyStruct[], overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        emitterAddress(overrides?: CallOverrides): Promise<BigNumber>;
        encodeMessage(message: MockRelayerIntegration.MessageStruct, overrides?: CallOverrides): Promise<BigNumber>;
        getDeliveryData(overrides?: CallOverrides): Promise<BigNumber>;
        getMessage(overrides?: CallOverrides): Promise<BigNumber>;
        getMessageHistory(overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredContractAddress(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveWormholeMessages(payload: PromiseOrValue<BytesLike>, additionalVaas: PromiseOrValue<BytesLike>[], sourceAddress: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<BigNumberish>, deliveryHash: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerEmitter(chainId: PromiseOrValue<BigNumberish>, emitterAddress_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerEmitters(emitters: XAddressStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resend(chainId: PromiseOrValue<BigNumberish>, sequence: PromiseOrValue<BigNumberish>, targetChain: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendMessage(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendMessageWithAdditionalVaas(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendMessageWithMultiForwardedResponse(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendMessageWithRefund(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, destination: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        emitterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        encodeMessage(message: MockRelayerIntegration.MessageStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDeliveryData(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMessageHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredContractAddress(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveWormholeMessages(payload: PromiseOrValue<BytesLike>, additionalVaas: PromiseOrValue<BytesLike>[], sourceAddress: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<BigNumberish>, deliveryHash: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerEmitter(chainId: PromiseOrValue<BigNumberish>, emitterAddress_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerEmitters(emitters: XAddressStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resend(chainId: PromiseOrValue<BigNumberish>, sequence: PromiseOrValue<BigNumberish>, targetChain: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendMessage(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendMessageWithAdditionalVaas(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "sendMessageWithForwardedResponse(bytes,bytes,uint16,uint32,uint128,uint16,address)"(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendMessageWithMultiForwardedResponse(_message: PromiseOrValue<BytesLike>, _forwardedMessage: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendMessageWithRefund(_message: PromiseOrValue<BytesLike>, targetChain: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, destination: PromiseOrValue<string>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
