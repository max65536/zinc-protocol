import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace StdInvariant {
    type FuzzSelectorStruct = {
        addr: PromiseOrValue<string>;
        selectors: PromiseOrValue<BytesLike>[];
    };
    type FuzzSelectorStructOutput = [string, string[]] & {
        addr: string;
        selectors: string[];
    };
}
export interface TestSettersInterface extends utils.Interface {
    functions: {
        "IS_TEST()": FunctionFragment;
        "arrayElementLocation(bytes32,uint8)": FunctionFragment;
        "excludeArtifacts()": FunctionFragment;
        "excludeContracts()": FunctionFragment;
        "excludeSenders()": FunctionFragment;
        "failed()": FunctionFragment;
        "hashedLocation(bytes32,bytes32)": FunctionFragment;
        "hashedLocation(address,bytes32)": FunctionFragment;
        "hashedLocationOffset(uint32,bytes32,uint256)": FunctionFragment;
        "kevm()": FunctionFragment;
        "setUp()": FunctionFragment;
        "storeWithMask(address,bytes32,bytes32,bytes32)": FunctionFragment;
        "targetArtifactSelectors()": FunctionFragment;
        "targetArtifacts()": FunctionFragment;
        "targetContracts()": FunctionFragment;
        "targetSelectors()": FunctionFragment;
        "targetSenders()": FunctionFragment;
        "testExpireGuardianSet(uint32,uint32,bytes32)": FunctionFragment;
        "testExpireGuardianSet_KEVM(uint32,uint32,bytes32)": FunctionFragment;
        "testSetChainId(uint16,bytes32)": FunctionFragment;
        "testSetChainId_KEVM(uint16,bytes32)": FunctionFragment;
        "testSetEvmChainId_Revert(uint256,bytes32)": FunctionFragment;
        "testSetEvmChainId_Revert_KEVM(uint256,bytes32)": FunctionFragment;
        "testSetEvmChainId_Success(uint256,bytes32)": FunctionFragment;
        "testSetEvmChainId_Success_KEVM(uint256,bytes32)": FunctionFragment;
        "testSetGovernanceActionConsumed(bytes32,bytes32)": FunctionFragment;
        "testSetGovernanceActionConsumed_KEVM(bytes32,bytes32)": FunctionFragment;
        "testSetGovernanceChainId(uint16,bytes32)": FunctionFragment;
        "testSetGovernanceChainId_KEVM(uint16,bytes32)": FunctionFragment;
        "testSetGovernanceContract(bytes32,bytes32)": FunctionFragment;
        "testSetGovernanceContract_KEVM(bytes32,bytes32)": FunctionFragment;
        "testSetInitialized(address,bytes32)": FunctionFragment;
        "testSetInitialized_KEVM(address,bytes32)": FunctionFragment;
        "testSetMessageFee(uint256,bytes32)": FunctionFragment;
        "testSetMessageFee_KEVM(uint256,bytes32)": FunctionFragment;
        "testSetNextSequence(address,uint64,bytes32)": FunctionFragment;
        "testSetNextSequence_KEVM(address,uint64,bytes32)": FunctionFragment;
        "testUpdateGuardianSetIndex(uint32,bytes32)": FunctionFragment;
        "testUpdateGuardianSetIndex_KEVM(uint32,bytes32)": FunctionFragment;
        "validSignature(uint256,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "IS_TEST" | "arrayElementLocation" | "excludeArtifacts" | "excludeContracts" | "excludeSenders" | "failed" | "hashedLocation(bytes32,bytes32)" | "hashedLocation(address,bytes32)" | "hashedLocationOffset" | "kevm" | "setUp" | "storeWithMask" | "targetArtifactSelectors" | "targetArtifacts" | "targetContracts" | "targetSelectors" | "targetSenders" | "testExpireGuardianSet" | "testExpireGuardianSet_KEVM" | "testSetChainId" | "testSetChainId_KEVM" | "testSetEvmChainId_Revert" | "testSetEvmChainId_Revert_KEVM" | "testSetEvmChainId_Success" | "testSetEvmChainId_Success_KEVM" | "testSetGovernanceActionConsumed" | "testSetGovernanceActionConsumed_KEVM" | "testSetGovernanceChainId" | "testSetGovernanceChainId_KEVM" | "testSetGovernanceContract" | "testSetGovernanceContract_KEVM" | "testSetInitialized" | "testSetInitialized_KEVM" | "testSetMessageFee" | "testSetMessageFee_KEVM" | "testSetNextSequence" | "testSetNextSequence_KEVM" | "testUpdateGuardianSetIndex" | "testUpdateGuardianSetIndex_KEVM" | "validSignature"): FunctionFragment;
    encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
    encodeFunctionData(functionFragment: "arrayElementLocation", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "excludeArtifacts", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeContracts", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "failed", values?: undefined): string;
    encodeFunctionData(functionFragment: "hashedLocation(bytes32,bytes32)", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "hashedLocation(address,bytes32)", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "hashedLocationOffset", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "kevm", values?: undefined): string;
    encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
    encodeFunctionData(functionFragment: "storeWithMask", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "targetArtifactSelectors", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetArtifacts", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetContracts", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetSelectors", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "testExpireGuardianSet", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testExpireGuardianSet_KEVM", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testSetChainId", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetChainId_KEVM", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetEvmChainId_Revert", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetEvmChainId_Revert_KEVM", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetEvmChainId_Success", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetEvmChainId_Success_KEVM", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetGovernanceActionConsumed", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetGovernanceActionConsumed_KEVM", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetGovernanceChainId", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetGovernanceChainId_KEVM", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetGovernanceContract", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetGovernanceContract_KEVM", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetInitialized", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetInitialized_KEVM", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetMessageFee", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetMessageFee_KEVM", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testSetNextSequence", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testSetNextSequence_KEVM", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testUpdateGuardianSetIndex", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testUpdateGuardianSetIndex_KEVM", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "validSignature", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "arrayElementLocation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeArtifacts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashedLocation(bytes32,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashedLocation(address,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashedLocationOffset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kevm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "storeWithMask", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetArtifactSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetArtifacts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testExpireGuardianSet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testExpireGuardianSet_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetChainId_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetEvmChainId_Revert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetEvmChainId_Revert_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetEvmChainId_Success", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetEvmChainId_Success_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetGovernanceActionConsumed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetGovernanceActionConsumed_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetGovernanceChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetGovernanceChainId_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetGovernanceContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetGovernanceContract_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetInitialized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetInitialized_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetMessageFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetMessageFee_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetNextSequence", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSetNextSequence_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testUpdateGuardianSetIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testUpdateGuardianSetIndex_KEVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validSignature", data: BytesLike): Result;
    events: {
        "log(string)": EventFragment;
        "log_address(address)": EventFragment;
        "log_array(uint256[])": EventFragment;
        "log_array(int256[])": EventFragment;
        "log_array(address[])": EventFragment;
        "log_bytes(bytes)": EventFragment;
        "log_bytes32(bytes32)": EventFragment;
        "log_int(int256)": EventFragment;
        "log_named_address(string,address)": EventFragment;
        "log_named_array(string,uint256[])": EventFragment;
        "log_named_array(string,int256[])": EventFragment;
        "log_named_array(string,address[])": EventFragment;
        "log_named_bytes(string,bytes)": EventFragment;
        "log_named_bytes32(string,bytes32)": EventFragment;
        "log_named_decimal_int(string,int256,uint256)": EventFragment;
        "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
        "log_named_int(string,int256)": EventFragment;
        "log_named_string(string,string)": EventFragment;
        "log_named_uint(string,uint256)": EventFragment;
        "log_string(string)": EventFragment;
        "log_uint(uint256)": EventFragment;
        "logs(bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,uint256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}
export interface logEventObject {
    arg0: string;
}
export declare type logEvent = TypedEvent<[string], logEventObject>;
export declare type logEventFilter = TypedEventFilter<logEvent>;
export interface log_addressEventObject {
    arg0: string;
}
export declare type log_addressEvent = TypedEvent<[string], log_addressEventObject>;
export declare type log_addressEventFilter = TypedEventFilter<log_addressEvent>;
export interface log_array_uint256_array_EventObject {
    val: BigNumber[];
}
export declare type log_array_uint256_array_Event = TypedEvent<[
    BigNumber[]
], log_array_uint256_array_EventObject>;
export declare type log_array_uint256_array_EventFilter = TypedEventFilter<log_array_uint256_array_Event>;
export interface log_array_int256_array_EventObject {
    val: BigNumber[];
}
export declare type log_array_int256_array_Event = TypedEvent<[
    BigNumber[]
], log_array_int256_array_EventObject>;
export declare type log_array_int256_array_EventFilter = TypedEventFilter<log_array_int256_array_Event>;
export interface log_array_address_array_EventObject {
    val: string[];
}
export declare type log_array_address_array_Event = TypedEvent<[
    string[]
], log_array_address_array_EventObject>;
export declare type log_array_address_array_EventFilter = TypedEventFilter<log_array_address_array_Event>;
export interface log_bytesEventObject {
    arg0: string;
}
export declare type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;
export declare type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;
export interface log_bytes32EventObject {
    arg0: string;
}
export declare type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;
export declare type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;
export interface log_intEventObject {
    arg0: BigNumber;
}
export declare type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;
export declare type log_intEventFilter = TypedEventFilter<log_intEvent>;
export interface log_named_addressEventObject {
    key: string;
    val: string;
}
export declare type log_named_addressEvent = TypedEvent<[
    string,
    string
], log_named_addressEventObject>;
export declare type log_named_addressEventFilter = TypedEventFilter<log_named_addressEvent>;
export interface log_named_array_string_uint256_array_EventObject {
    key: string;
    val: BigNumber[];
}
export declare type log_named_array_string_uint256_array_Event = TypedEvent<[
    string,
    BigNumber[]
], log_named_array_string_uint256_array_EventObject>;
export declare type log_named_array_string_uint256_array_EventFilter = TypedEventFilter<log_named_array_string_uint256_array_Event>;
export interface log_named_array_string_int256_array_EventObject {
    key: string;
    val: BigNumber[];
}
export declare type log_named_array_string_int256_array_Event = TypedEvent<[
    string,
    BigNumber[]
], log_named_array_string_int256_array_EventObject>;
export declare type log_named_array_string_int256_array_EventFilter = TypedEventFilter<log_named_array_string_int256_array_Event>;
export interface log_named_array_string_address_array_EventObject {
    key: string;
    val: string[];
}
export declare type log_named_array_string_address_array_Event = TypedEvent<[
    string,
    string[]
], log_named_array_string_address_array_EventObject>;
export declare type log_named_array_string_address_array_EventFilter = TypedEventFilter<log_named_array_string_address_array_Event>;
export interface log_named_bytesEventObject {
    key: string;
    val: string;
}
export declare type log_named_bytesEvent = TypedEvent<[
    string,
    string
], log_named_bytesEventObject>;
export declare type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;
export interface log_named_bytes32EventObject {
    key: string;
    val: string;
}
export declare type log_named_bytes32Event = TypedEvent<[
    string,
    string
], log_named_bytes32EventObject>;
export declare type log_named_bytes32EventFilter = TypedEventFilter<log_named_bytes32Event>;
export interface log_named_decimal_intEventObject {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
}
export declare type log_named_decimal_intEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], log_named_decimal_intEventObject>;
export declare type log_named_decimal_intEventFilter = TypedEventFilter<log_named_decimal_intEvent>;
export interface log_named_decimal_uintEventObject {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
}
export declare type log_named_decimal_uintEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], log_named_decimal_uintEventObject>;
export declare type log_named_decimal_uintEventFilter = TypedEventFilter<log_named_decimal_uintEvent>;
export interface log_named_intEventObject {
    key: string;
    val: BigNumber;
}
export declare type log_named_intEvent = TypedEvent<[
    string,
    BigNumber
], log_named_intEventObject>;
export declare type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;
export interface log_named_stringEventObject {
    key: string;
    val: string;
}
export declare type log_named_stringEvent = TypedEvent<[
    string,
    string
], log_named_stringEventObject>;
export declare type log_named_stringEventFilter = TypedEventFilter<log_named_stringEvent>;
export interface log_named_uintEventObject {
    key: string;
    val: BigNumber;
}
export declare type log_named_uintEvent = TypedEvent<[
    string,
    BigNumber
], log_named_uintEventObject>;
export declare type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;
export interface log_stringEventObject {
    arg0: string;
}
export declare type log_stringEvent = TypedEvent<[string], log_stringEventObject>;
export declare type log_stringEventFilter = TypedEventFilter<log_stringEvent>;
export interface log_uintEventObject {
    arg0: BigNumber;
}
export declare type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;
export declare type log_uintEventFilter = TypedEventFilter<log_uintEvent>;
export interface logsEventObject {
    arg0: string;
}
export declare type logsEvent = TypedEvent<[string], logsEventObject>;
export declare type logsEventFilter = TypedEventFilter<logsEvent>;
export interface TestSetters extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestSettersInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;
        arrayElementLocation(keyHash: PromiseOrValue<BytesLike>, arrayOffset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        excludeArtifacts(overrides?: CallOverrides): Promise<[string[]] & {
            excludedArtifacts_: string[];
        }>;
        excludeContracts(overrides?: CallOverrides): Promise<[string[]] & {
            excludedContracts_: string[];
        }>;
        excludeSenders(overrides?: CallOverrides): Promise<[string[]] & {
            excludedSenders_: string[];
        }>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "hashedLocation(bytes32,bytes32)"(_key: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        "hashedLocation(address,bytes32)"(_key: PromiseOrValue<string>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        hashedLocationOffset(_key: PromiseOrValue<BigNumberish>, _index: PromiseOrValue<BytesLike>, offset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        kevm(overrides?: CallOverrides): Promise<[string]>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        storeWithMask(contractAddress: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, content: PromiseOrValue<BytesLike>, mask: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<[
            StdInvariant.FuzzSelectorStructOutput[]
        ] & {
            targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
        }>;
        targetArtifacts(overrides?: CallOverrides): Promise<[string[]] & {
            targetedArtifacts_: string[];
        }>;
        targetContracts(overrides?: CallOverrides): Promise<[string[]] & {
            targetedContracts_: string[];
        }>;
        targetSelectors(overrides?: CallOverrides): Promise<[
            StdInvariant.FuzzSelectorStructOutput[]
        ] & {
            targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
        }>;
        targetSenders(overrides?: CallOverrides): Promise<[string[]] & {
            targetedSenders_: string[];
        }>;
        testExpireGuardianSet(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testExpireGuardianSet_KEVM(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetEvmChainId_Revert(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetEvmChainId_Revert_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetEvmChainId_Success(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetEvmChainId_Success_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetGovernanceActionConsumed(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetGovernanceActionConsumed_KEVM(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetGovernanceChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetGovernanceChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetGovernanceContract(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetGovernanceContract_KEVM(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetInitialized(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetInitialized_KEVM(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetMessageFee(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetMessageFee_KEVM(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetNextSequence(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSetNextSequence_KEVM(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testUpdateGuardianSetIndex(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testUpdateGuardianSetIndex_KEVM(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        validSignature(pk: PromiseOrValue<BigNumberish>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string] & {
            signature: string;
        }>;
    };
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;
    arrayElementLocation(keyHash: PromiseOrValue<BytesLike>, arrayOffset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;
    excludeContracts(overrides?: CallOverrides): Promise<string[]>;
    excludeSenders(overrides?: CallOverrides): Promise<string[]>;
    failed(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "hashedLocation(bytes32,bytes32)"(_key: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    "hashedLocation(address,bytes32)"(_key: PromiseOrValue<string>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    hashedLocationOffset(_key: PromiseOrValue<BigNumberish>, _index: PromiseOrValue<BytesLike>, offset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    kevm(overrides?: CallOverrides): Promise<string>;
    setUp(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    storeWithMask(contractAddress: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, content: PromiseOrValue<BytesLike>, mask: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targetArtifactSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;
    targetContracts(overrides?: CallOverrides): Promise<string[]>;
    targetSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
    targetSenders(overrides?: CallOverrides): Promise<string[]>;
    testExpireGuardianSet(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testExpireGuardianSet_KEVM(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetEvmChainId_Revert(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetEvmChainId_Revert_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetEvmChainId_Success(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetEvmChainId_Success_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetGovernanceActionConsumed(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetGovernanceActionConsumed_KEVM(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetGovernanceChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetGovernanceChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetGovernanceContract(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetGovernanceContract_KEVM(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetInitialized(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetInitialized_KEVM(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetMessageFee(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetMessageFee_KEVM(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetNextSequence(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSetNextSequence_KEVM(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testUpdateGuardianSetIndex(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testUpdateGuardianSetIndex_KEVM(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    validSignature(pk: PromiseOrValue<BigNumberish>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        IS_TEST(overrides?: CallOverrides): Promise<boolean>;
        arrayElementLocation(keyHash: PromiseOrValue<BytesLike>, arrayOffset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;
        excludeContracts(overrides?: CallOverrides): Promise<string[]>;
        excludeSenders(overrides?: CallOverrides): Promise<string[]>;
        failed(overrides?: CallOverrides): Promise<boolean>;
        "hashedLocation(bytes32,bytes32)"(_key: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        "hashedLocation(address,bytes32)"(_key: PromiseOrValue<string>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        hashedLocationOffset(_key: PromiseOrValue<BigNumberish>, _index: PromiseOrValue<BytesLike>, offset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        kevm(overrides?: CallOverrides): Promise<string>;
        setUp(overrides?: CallOverrides): Promise<void>;
        storeWithMask(contractAddress: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, content: PromiseOrValue<BytesLike>, mask: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
        targetArtifacts(overrides?: CallOverrides): Promise<string[]>;
        targetContracts(overrides?: CallOverrides): Promise<string[]>;
        targetSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
        targetSenders(overrides?: CallOverrides): Promise<string[]>;
        testExpireGuardianSet(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testExpireGuardianSet_KEVM(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetEvmChainId_Revert(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetEvmChainId_Revert_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetEvmChainId_Success(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetEvmChainId_Success_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetGovernanceActionConsumed(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetGovernanceActionConsumed_KEVM(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetGovernanceChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetGovernanceChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetGovernanceContract(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetGovernanceContract_KEVM(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetInitialized(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetInitialized_KEVM(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetMessageFee(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetMessageFee_KEVM(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetNextSequence(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSetNextSequence_KEVM(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testUpdateGuardianSetIndex(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testUpdateGuardianSetIndex_KEVM(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        validSignature(pk: PromiseOrValue<BigNumberish>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "log(string)"(arg0?: null): logEventFilter;
        log(arg0?: null): logEventFilter;
        "log_address(address)"(arg0?: null): log_addressEventFilter;
        log_address(arg0?: null): log_addressEventFilter;
        "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
        "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
        "log_array(address[])"(val?: null): log_array_address_array_EventFilter;
        "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
        log_bytes(arg0?: null): log_bytesEventFilter;
        "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
        log_bytes32(arg0?: null): log_bytes32EventFilter;
        "log_int(int256)"(arg0?: null): log_intEventFilter;
        log_int(arg0?: null): log_intEventFilter;
        "log_named_address(string,address)"(key?: null, val?: null): log_named_addressEventFilter;
        log_named_address(key?: null, val?: null): log_named_addressEventFilter;
        "log_named_array(string,uint256[])"(key?: null, val?: null): log_named_array_string_uint256_array_EventFilter;
        "log_named_array(string,int256[])"(key?: null, val?: null): log_named_array_string_int256_array_EventFilter;
        "log_named_array(string,address[])"(key?: null, val?: null): log_named_array_string_address_array_EventFilter;
        "log_named_bytes(string,bytes)"(key?: null, val?: null): log_named_bytesEventFilter;
        log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;
        "log_named_bytes32(string,bytes32)"(key?: null, val?: null): log_named_bytes32EventFilter;
        log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;
        "log_named_decimal_int(string,int256,uint256)"(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;
        log_named_decimal_int(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;
        "log_named_decimal_uint(string,uint256,uint256)"(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;
        log_named_decimal_uint(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;
        "log_named_int(string,int256)"(key?: null, val?: null): log_named_intEventFilter;
        log_named_int(key?: null, val?: null): log_named_intEventFilter;
        "log_named_string(string,string)"(key?: null, val?: null): log_named_stringEventFilter;
        log_named_string(key?: null, val?: null): log_named_stringEventFilter;
        "log_named_uint(string,uint256)"(key?: null, val?: null): log_named_uintEventFilter;
        log_named_uint(key?: null, val?: null): log_named_uintEventFilter;
        "log_string(string)"(arg0?: null): log_stringEventFilter;
        log_string(arg0?: null): log_stringEventFilter;
        "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
        log_uint(arg0?: null): log_uintEventFilter;
        "logs(bytes)"(arg0?: null): logsEventFilter;
        logs(arg0?: null): logsEventFilter;
    };
    estimateGas: {
        IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;
        arrayElementLocation(keyHash: PromiseOrValue<BytesLike>, arrayOffset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;
        excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;
        excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "hashedLocation(bytes32,bytes32)"(_key: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "hashedLocation(address,bytes32)"(_key: PromiseOrValue<string>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        hashedLocationOffset(_key: PromiseOrValue<BigNumberish>, _index: PromiseOrValue<BytesLike>, offset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        kevm(overrides?: CallOverrides): Promise<BigNumber>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        storeWithMask(contractAddress: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, content: PromiseOrValue<BytesLike>, mask: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;
        targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;
        targetContracts(overrides?: CallOverrides): Promise<BigNumber>;
        targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;
        targetSenders(overrides?: CallOverrides): Promise<BigNumber>;
        testExpireGuardianSet(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testExpireGuardianSet_KEVM(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetEvmChainId_Revert(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetEvmChainId_Revert_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetEvmChainId_Success(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetEvmChainId_Success_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetGovernanceActionConsumed(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetGovernanceActionConsumed_KEVM(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetGovernanceChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetGovernanceChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetGovernanceContract(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetGovernanceContract_KEVM(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetInitialized(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetInitialized_KEVM(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetMessageFee(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetMessageFee_KEVM(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetNextSequence(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSetNextSequence_KEVM(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testUpdateGuardianSetIndex(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testUpdateGuardianSetIndex_KEVM(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        validSignature(pk: PromiseOrValue<BigNumberish>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        arrayElementLocation(keyHash: PromiseOrValue<BytesLike>, arrayOffset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "hashedLocation(bytes32,bytes32)"(_key: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "hashedLocation(address,bytes32)"(_key: PromiseOrValue<string>, _index: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashedLocationOffset(_key: PromiseOrValue<BigNumberish>, _index: PromiseOrValue<BytesLike>, offset: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        kevm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        storeWithMask(contractAddress: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, content: PromiseOrValue<BytesLike>, mask: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testExpireGuardianSet(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testExpireGuardianSet_KEVM(timestamp: PromiseOrValue<BigNumberish>, index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetEvmChainId_Revert(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetEvmChainId_Revert_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetEvmChainId_Success(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetEvmChainId_Success_KEVM(newEvmChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetGovernanceActionConsumed(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetGovernanceActionConsumed_KEVM(hash: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetGovernanceChainId(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetGovernanceChainId_KEVM(newChainId: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetGovernanceContract(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetGovernanceContract_KEVM(newGovernanceContract: PromiseOrValue<BytesLike>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetInitialized(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetInitialized_KEVM(newImplementation: PromiseOrValue<string>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetMessageFee(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetMessageFee_KEVM(newFee: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetNextSequence(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSetNextSequence_KEVM(emitter: PromiseOrValue<string>, sequence: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testUpdateGuardianSetIndex(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testUpdateGuardianSetIndex_KEVM(index: PromiseOrValue<BigNumberish>, storageSlot: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        validSignature(pk: PromiseOrValue<BigNumberish>, hash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
