import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare type EvmDeliveryInstructionStruct = {
    sourceChain: PromiseOrValue<BigNumberish>;
    targetAddress: PromiseOrValue<BytesLike>;
    payload: PromiseOrValue<BytesLike>;
    gasLimit: PromiseOrValue<BigNumberish>;
    totalReceiverValue: PromiseOrValue<BigNumberish>;
    targetChainRefundPerGasUnused: PromiseOrValue<BigNumberish>;
    senderAddress: PromiseOrValue<BytesLike>;
    deliveryHash: PromiseOrValue<BytesLike>;
    signedVaas: PromiseOrValue<BytesLike>[];
};
export declare type EvmDeliveryInstructionStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string[]
] & {
    sourceChain: number;
    targetAddress: string;
    payload: string;
    gasLimit: BigNumber;
    totalReceiverValue: BigNumber;
    targetChainRefundPerGasUnused: BigNumber;
    senderAddress: string;
    deliveryHash: string;
    signedVaas: string[];
};
export declare type VaaKeyStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
};
export declare type VaaKeyStructOutput = [number, string, BigNumber] & {
    chainId: number;
    emitterAddress: string;
    sequence: BigNumber;
};
export interface WormholeRelayerInterface extends utils.Interface {
    functions: {
        "checkAndExecuteUpgradeMigration()": FunctionFragment;
        "deliver(bytes[],bytes,address,bytes)": FunctionFragment;
        "deliveryAttempted(bytes32)": FunctionFragment;
        "deliveryFailureBlock(bytes32)": FunctionFragment;
        "deliverySuccessBlock(bytes32)": FunctionFragment;
        "executeInstruction((uint16,bytes32,bytes,uint256,uint256,uint256,bytes32,bytes32,bytes[]))": FunctionFragment;
        "forward(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": FunctionFragment;
        "forwardPayloadToEvm(uint16,address,bytes,uint256,uint256)": FunctionFragment;
        "forwardToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": FunctionFragment;
        "forwardVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": FunctionFragment;
        "getDefaultDeliveryProvider()": FunctionFragment;
        "getDefaultDeliveryProviderOnChain(uint16)": FunctionFragment;
        "getOriginalOrDefaultDeliveryProvider(uint16)": FunctionFragment;
        "getRegisteredWormholeRelayerContract(uint16)": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "quoteDeliveryPrice(uint16,uint256,bytes,address)": FunctionFragment;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": FunctionFragment;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256)": FunctionFragment;
        "quoteNativeForChain(uint16,uint256,address)": FunctionFragment;
        "registerWormholeRelayerContract(bytes)": FunctionFragment;
        "resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": FunctionFragment;
        "resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": FunctionFragment;
        "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": FunctionFragment;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": FunctionFragment;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": FunctionFragment;
        "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": FunctionFragment;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": FunctionFragment;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": FunctionFragment;
        "setDefaultDeliveryProvider(bytes)": FunctionFragment;
        "submitContractUpgrade(bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "checkAndExecuteUpgradeMigration" | "deliver" | "deliveryAttempted" | "deliveryFailureBlock" | "deliverySuccessBlock" | "executeInstruction" | "forward" | "forwardPayloadToEvm" | "forwardToEvm" | "forwardVaasToEvm" | "getDefaultDeliveryProvider" | "getDefaultDeliveryProviderOnChain" | "getOriginalOrDefaultDeliveryProvider" | "getRegisteredWormholeRelayerContract" | "initialize" | "quoteDeliveryPrice" | "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)" | "quoteEVMDeliveryPrice(uint16,uint256,uint256)" | "quoteNativeForChain" | "registerWormholeRelayerContract" | "resend" | "resendToEvm" | "send" | "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)" | "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)" | "sendToEvm" | "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])" | "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)" | "setDefaultDeliveryProvider" | "submitContractUpgrade"): FunctionFragment;
    encodeFunctionData(functionFragment: "checkAndExecuteUpgradeMigration", values?: undefined): string;
    encodeFunctionData(functionFragment: "deliver", values: [
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "deliveryAttempted", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliveryFailureBlock", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliverySuccessBlock", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "executeInstruction", values: [EvmDeliveryInstructionStruct]): string;
    encodeFunctionData(functionFragment: "forward", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        VaaKeyStruct[],
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "forwardPayloadToEvm", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "forwardToEvm", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        VaaKeyStruct[],
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "forwardVaasToEvm", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        VaaKeyStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultDeliveryProvider", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDefaultDeliveryProviderOnChain", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getOriginalOrDefaultDeliveryProvider", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredWormholeRelayerContract", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "quoteDeliveryPrice", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "quoteNativeForChain", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "registerWormholeRelayerContract", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "resend", values: [
        VaaKeyStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "resendToEvm", values: [
        VaaKeyStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        VaaKeyStruct[],
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendToEvm", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        VaaKeyStruct[],
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        VaaKeyStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        VaaKeyStruct[],
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultDeliveryProvider", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "submitContractUpgrade", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "checkAndExecuteUpgradeMigration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliveryAttempted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliveryFailureBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverySuccessBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeInstruction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forwardPayloadToEvm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forwardToEvm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forwardVaasToEvm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultDeliveryProvider", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultDeliveryProviderOnChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOriginalOrDefaultDeliveryProvider", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredWormholeRelayerContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteDeliveryPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteNativeForChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerWormholeRelayerContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resendToEvm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendToEvm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultDeliveryProvider", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "submitContractUpgrade", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "ContractUpgraded(address,address)": EventFragment;
        "Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)": EventFragment;
        "SendEvent(uint64,uint256,uint256)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Delivery"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendEvent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
export interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
export declare type AdminChangedEvent = TypedEvent<[
    string,
    string
], AdminChangedEventObject>;
export declare type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
export interface BeaconUpgradedEventObject {
    beacon: string;
}
export declare type BeaconUpgradedEvent = TypedEvent<[
    string
], BeaconUpgradedEventObject>;
export declare type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
export interface ContractUpgradedEventObject {
    oldContract: string;
    newContract: string;
}
export declare type ContractUpgradedEvent = TypedEvent<[
    string,
    string
], ContractUpgradedEventObject>;
export declare type ContractUpgradedEventFilter = TypedEventFilter<ContractUpgradedEvent>;
export interface DeliveryEventObject {
    recipientContract: string;
    sourceChain: number;
    sequence: BigNumber;
    deliveryVaaHash: string;
    status: number;
    gasUsed: BigNumber;
    refundStatus: number;
    additionalStatusInfo: string;
    overridesInfo: string;
}
export declare type DeliveryEvent = TypedEvent<[
    string,
    number,
    BigNumber,
    string,
    number,
    BigNumber,
    number,
    string,
    string
], DeliveryEventObject>;
export declare type DeliveryEventFilter = TypedEventFilter<DeliveryEvent>;
export interface SendEventEventObject {
    sequence: BigNumber;
    deliveryQuote: BigNumber;
    paymentForExtraReceiverValue: BigNumber;
}
export declare type SendEventEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber
], SendEventEventObject>;
export declare type SendEventEventFilter = TypedEventFilter<SendEventEvent>;
export interface UpgradedEventObject {
    implementation: string;
}
export declare type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
export declare type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
export interface WormholeRelayer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WormholeRelayerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkAndExecuteUpgradeMigration(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliver(encodedVMs: PromiseOrValue<BytesLike>[], encodedDeliveryVAA: PromiseOrValue<BytesLike>, relayerRefundAddress: PromiseOrValue<string>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            attempted: boolean;
        }>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            blockNumber: BigNumber;
        }>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            blockNumber: BigNumber;
        }>;
        executeInstruction(evmInstruction: EvmDeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        forward(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        forwardPayloadToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        forwardToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        forwardVaasToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<[string] & {
            deliveryProvider: string;
        }>;
        getDefaultDeliveryProviderOnChain(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            deliveryProvider: string;
        }>;
        getOriginalOrDefaultDeliveryProvider(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            deliveryProvider: string;
            deliveryProviderOnTarget: string;
        }>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        initialize(defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            nativePriceQuote: BigNumber;
            encodedExecutionInfo: string;
        }>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativePriceQuote: BigNumber;
            targetChainRefundPerGasUnused: BigNumber;
        }>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativePriceQuote: BigNumber;
            targetChainRefundPerGasUnused: BigNumber;
        }>;
        quoteNativeForChain(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            targetChainAmount: BigNumber;
        }>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resend(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newEncodedExecutionParameters: PromiseOrValue<BytesLike>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resendToEvm(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    checkAndExecuteUpgradeMigration(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliver(encodedVMs: PromiseOrValue<BytesLike>[], encodedDeliveryVAA: PromiseOrValue<BytesLike>, relayerRefundAddress: PromiseOrValue<string>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    executeInstruction(evmInstruction: EvmDeliveryInstructionStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    forward(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    forwardPayloadToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    forwardToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    forwardVaasToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<string>;
    getDefaultDeliveryProviderOnChain(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getOriginalOrDefaultDeliveryProvider(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        string,
        string
    ] & {
        deliveryProvider: string;
        deliveryProviderOnTarget: string;
    }>;
    getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    initialize(defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        string
    ] & {
        nativePriceQuote: BigNumber;
        encodedExecutionInfo: string;
    }>;
    "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
    }>;
    "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
    }>;
    quoteNativeForChain(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resend(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newEncodedExecutionParameters: PromiseOrValue<BytesLike>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resendToEvm(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        checkAndExecuteUpgradeMigration(overrides?: CallOverrides): Promise<void>;
        deliver(encodedVMs: PromiseOrValue<BytesLike>[], encodedDeliveryVAA: PromiseOrValue<BytesLike>, relayerRefundAddress: PromiseOrValue<string>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        executeInstruction(evmInstruction: EvmDeliveryInstructionStruct, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            status: number;
            gasUsed: BigNumber;
            targetRevertDataTruncated: string;
        }>;
        forward(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        forwardPayloadToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        forwardToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        forwardVaasToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: CallOverrides): Promise<void>;
        getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<string>;
        getDefaultDeliveryProviderOnChain(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getOriginalOrDefaultDeliveryProvider(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string
        ] & {
            deliveryProvider: string;
            deliveryProviderOnTarget: string;
        }>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        initialize(defaultDeliveryProvider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            string
        ] & {
            nativePriceQuote: BigNumber;
            encodedExecutionInfo: string;
        }>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativePriceQuote: BigNumber;
            targetChainRefundPerGasUnused: BigNumber;
        }>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativePriceQuote: BigNumber;
            targetChainRefundPerGasUnused: BigNumber;
        }>;
        quoteNativeForChain(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        resend(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newEncodedExecutionParameters: PromiseOrValue<BytesLike>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        resendToEvm(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        send(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        "ContractUpgraded(address,address)"(oldContract?: PromiseOrValue<string> | null, newContract?: PromiseOrValue<string> | null): ContractUpgradedEventFilter;
        ContractUpgraded(oldContract?: PromiseOrValue<string> | null, newContract?: PromiseOrValue<string> | null): ContractUpgradedEventFilter;
        "Delivery(address,uint16,uint64,bytes32,uint8,uint256,uint8,bytes,bytes)"(recipientContract?: PromiseOrValue<string> | null, sourceChain?: PromiseOrValue<BigNumberish> | null, sequence?: PromiseOrValue<BigNumberish> | null, deliveryVaaHash?: null, status?: null, gasUsed?: null, refundStatus?: null, additionalStatusInfo?: null, overridesInfo?: null): DeliveryEventFilter;
        Delivery(recipientContract?: PromiseOrValue<string> | null, sourceChain?: PromiseOrValue<BigNumberish> | null, sequence?: PromiseOrValue<BigNumberish> | null, deliveryVaaHash?: null, status?: null, gasUsed?: null, refundStatus?: null, additionalStatusInfo?: null, overridesInfo?: null): DeliveryEventFilter;
        "SendEvent(uint64,uint256,uint256)"(sequence?: PromiseOrValue<BigNumberish> | null, deliveryQuote?: null, paymentForExtraReceiverValue?: null): SendEventEventFilter;
        SendEvent(sequence?: PromiseOrValue<BigNumberish> | null, deliveryQuote?: null, paymentForExtraReceiverValue?: null): SendEventEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };
    estimateGas: {
        checkAndExecuteUpgradeMigration(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliver(encodedVMs: PromiseOrValue<BytesLike>[], encodedDeliveryVAA: PromiseOrValue<BytesLike>, relayerRefundAddress: PromiseOrValue<string>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        executeInstruction(evmInstruction: EvmDeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        forward(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        forwardPayloadToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        forwardToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        forwardVaasToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultDeliveryProviderOnChain(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getOriginalOrDefaultDeliveryProvider(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteNativeForChain(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resend(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newEncodedExecutionParameters: PromiseOrValue<BytesLike>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resendToEvm(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        checkAndExecuteUpgradeMigration(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliver(encodedVMs: PromiseOrValue<BytesLike>[], encodedDeliveryVAA: PromiseOrValue<BytesLike>, relayerRefundAddress: PromiseOrValue<string>, deliveryOverrides: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        executeInstruction(evmInstruction: EvmDeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        forward(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        forwardPayloadToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        forwardToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        forwardVaasToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultDeliveryProviderOnChain(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOriginalOrDefaultDeliveryProvider(targetChain: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(defaultDeliveryProvider: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        quoteDeliveryPrice(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteNativeForChain(targetChain: PromiseOrValue<BigNumberish>, currentChainAmount: PromiseOrValue<BigNumberish>, deliveryProviderAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerWormholeRelayerContract(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resend(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newEncodedExecutionParameters: PromiseOrValue<BytesLike>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resendToEvm(deliveryVaaKey: VaaKeyStruct, targetChain: PromiseOrValue<BigNumberish>, newReceiverValue: PromiseOrValue<BigNumberish>, newGasLimit: PromiseOrValue<BigNumberish>, newDeliveryProviderAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<BytesLike>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, encodedExecutionParameters: PromiseOrValue<BytesLike>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<BytesLike>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendToEvm(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, deliveryProviderAddress: PromiseOrValue<string>, vaaKeys: VaaKeyStruct[], consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(targetChain: PromiseOrValue<BigNumberish>, targetAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, receiverValue: PromiseOrValue<BigNumberish>, gasLimit: PromiseOrValue<BigNumberish>, vaaKeys: VaaKeyStruct[], refundChain: PromiseOrValue<BigNumberish>, refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultDeliveryProvider(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        submitContractUpgrade(encodedVm: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
