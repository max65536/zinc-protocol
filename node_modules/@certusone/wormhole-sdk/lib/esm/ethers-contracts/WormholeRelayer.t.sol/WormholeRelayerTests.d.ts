import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare type VaaKeyStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
};
export declare type VaaKeyStructOutput = [number, string, BigNumber] & {
    chainId: number;
    emitterAddress: string;
    sequence: BigNumber;
};
export declare type DeliveryInstructionStruct = {
    targetChain: PromiseOrValue<BigNumberish>;
    targetAddress: PromiseOrValue<BytesLike>;
    payload: PromiseOrValue<BytesLike>;
    requestedReceiverValue: PromiseOrValue<BigNumberish>;
    extraReceiverValue: PromiseOrValue<BigNumberish>;
    encodedExecutionInfo: PromiseOrValue<BytesLike>;
    refundChain: PromiseOrValue<BigNumberish>;
    refundAddress: PromiseOrValue<BytesLike>;
    refundDeliveryProvider: PromiseOrValue<BytesLike>;
    sourceDeliveryProvider: PromiseOrValue<BytesLike>;
    senderAddress: PromiseOrValue<BytesLike>;
    vaaKeys: VaaKeyStruct[];
};
export declare type DeliveryInstructionStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string,
    string,
    string,
    VaaKeyStructOutput[]
] & {
    targetChain: number;
    targetAddress: string;
    payload: string;
    requestedReceiverValue: BigNumber;
    extraReceiverValue: BigNumber;
    encodedExecutionInfo: string;
    refundChain: number;
    refundAddress: string;
    refundDeliveryProvider: string;
    sourceDeliveryProvider: string;
    senderAddress: string;
    vaaKeys: VaaKeyStructOutput[];
};
export declare type RedeliveryInstructionStruct = {
    deliveryVaaKey: VaaKeyStruct;
    targetChain: PromiseOrValue<BigNumberish>;
    newRequestedReceiverValue: PromiseOrValue<BigNumberish>;
    newEncodedExecutionInfo: PromiseOrValue<BytesLike>;
    newSourceDeliveryProvider: PromiseOrValue<BytesLike>;
    newSenderAddress: PromiseOrValue<BytesLike>;
};
export declare type RedeliveryInstructionStructOutput = [
    VaaKeyStructOutput,
    number,
    BigNumber,
    string,
    string,
    string
] & {
    deliveryVaaKey: VaaKeyStructOutput;
    targetChain: number;
    newRequestedReceiverValue: BigNumber;
    newEncodedExecutionInfo: string;
    newSourceDeliveryProvider: string;
    newSenderAddress: string;
};
export declare namespace WormholeRelayerTests {
    type GasParametersStruct = {
        evmGasOverhead: PromiseOrValue<BigNumberish>;
        targetGasLimit: PromiseOrValue<BigNumberish>;
        targetGasPrice: PromiseOrValue<BigNumberish>;
        sourceGasPrice: PromiseOrValue<BigNumberish>;
    };
    type GasParametersStructOutput = [
        number,
        number,
        BigNumber,
        BigNumber
    ] & {
        evmGasOverhead: number;
        targetGasLimit: number;
        targetGasPrice: BigNumber;
        sourceGasPrice: BigNumber;
    };
    type FeeParametersStruct = {
        targetNativePrice: PromiseOrValue<BigNumberish>;
        sourceNativePrice: PromiseOrValue<BigNumberish>;
        wormholeFeeOnSource: PromiseOrValue<BigNumberish>;
        wormholeFeeOnTarget: PromiseOrValue<BigNumberish>;
        receiverValueTarget: PromiseOrValue<BigNumberish>;
    };
    type FeeParametersStructOutput = [
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber
    ] & {
        targetNativePrice: BigNumber;
        sourceNativePrice: BigNumber;
        wormholeFeeOnSource: number;
        wormholeFeeOnTarget: number;
        receiverValueTarget: BigNumber;
    };
    type ContractsStruct = {
        wormhole: PromiseOrValue<string>;
        wormholeSimulator: PromiseOrValue<string>;
        deliveryProvider: PromiseOrValue<string>;
        coreRelayer: PromiseOrValue<string>;
        coreRelayerFull: PromiseOrValue<string>;
        integration: PromiseOrValue<string>;
        relayer: PromiseOrValue<string>;
        rewardAddress: PromiseOrValue<string>;
        refundAddress: PromiseOrValue<string>;
        chainId: PromiseOrValue<BigNumberish>;
    };
    type ContractsStructOutput = [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        number
    ] & {
        wormhole: string;
        wormholeSimulator: string;
        deliveryProvider: string;
        coreRelayer: string;
        coreRelayerFull: string;
        integration: string;
        relayer: string;
        rewardAddress: string;
        refundAddress: string;
        chainId: number;
    };
    type StandardSetupTwoChainsStruct = {
        sourceChain: PromiseOrValue<BigNumberish>;
        targetChain: PromiseOrValue<BigNumberish>;
        differentChainId: PromiseOrValue<BigNumberish>;
        source: WormholeRelayerTests.ContractsStruct;
        target: WormholeRelayerTests.ContractsStruct;
    };
    type StandardSetupTwoChainsStructOutput = [
        number,
        number,
        number,
        WormholeRelayerTests.ContractsStructOutput,
        WormholeRelayerTests.ContractsStructOutput
    ] & {
        sourceChain: number;
        targetChain: number;
        differentChainId: number;
        source: WormholeRelayerTests.ContractsStructOutput;
        target: WormholeRelayerTests.ContractsStructOutput;
    };
    type FundsCorrectTestStruct = {
        refundAddressBalance: PromiseOrValue<BigNumberish>;
        relayerBalance: PromiseOrValue<BigNumberish>;
        rewardAddressBalance: PromiseOrValue<BigNumberish>;
        destinationBalance: PromiseOrValue<BigNumberish>;
        sourceContractBalance: PromiseOrValue<BigNumberish>;
        targetContractBalance: PromiseOrValue<BigNumberish>;
        receiverValue: PromiseOrValue<BigNumberish>;
        deliveryPrice: PromiseOrValue<BigNumberish>;
        targetChainRefundPerGasUnused: PromiseOrValue<BigNumberish>;
        gasAmount: PromiseOrValue<BigNumberish>;
        refundAddressAmount: PromiseOrValue<BigNumberish>;
        relayerPayment: PromiseOrValue<BigNumberish>;
        rewardAddressAmount: PromiseOrValue<BigNumberish>;
        destinationAmount: PromiseOrValue<BigNumberish>;
    };
    type FundsCorrectTestStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        refundAddressBalance: BigNumber;
        relayerBalance: BigNumber;
        rewardAddressBalance: BigNumber;
        destinationBalance: BigNumber;
        sourceContractBalance: BigNumber;
        targetContractBalance: BigNumber;
        receiverValue: BigNumber;
        deliveryPrice: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
        gasAmount: number;
        refundAddressAmount: BigNumber;
        relayerPayment: BigNumber;
        rewardAddressAmount: BigNumber;
        destinationAmount: BigNumber;
    };
    type UnitTestResendParamsStruct = {
        deliveryVaaKey: VaaKeyStruct;
        newReceiverValue: PromiseOrValue<BigNumberish>;
        newGasLimit: PromiseOrValue<BigNumberish>;
        senderAddress: PromiseOrValue<string>;
    };
    type UnitTestResendParamsStructOutput = [
        VaaKeyStructOutput,
        BigNumber,
        number,
        string
    ] & {
        deliveryVaaKey: VaaKeyStructOutput;
        newReceiverValue: BigNumber;
        newGasLimit: number;
        senderAddress: string;
    };
    type UnitTestParamsStruct = {
        targetAddress: PromiseOrValue<string>;
        payload: PromiseOrValue<BytesLike>;
        receiverValue: PromiseOrValue<BigNumberish>;
        paymentForExtraReceiverValue: PromiseOrValue<BigNumberish>;
        gasLimit: PromiseOrValue<BigNumberish>;
        refundChain: PromiseOrValue<BigNumberish>;
        refundAddress: PromiseOrValue<string>;
        vaaKeysFixed: [VaaKeyStruct, VaaKeyStruct, VaaKeyStruct];
    };
    type UnitTestParamsStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        [
            VaaKeyStructOutput,
            VaaKeyStructOutput,
            VaaKeyStructOutput
        ]
    ] & {
        targetAddress: string;
        payload: string;
        receiverValue: BigNumber;
        paymentForExtraReceiverValue: BigNumber;
        gasLimit: number;
        refundChain: number;
        refundAddress: string;
        vaaKeysFixed: [VaaKeyStructOutput, VaaKeyStructOutput, VaaKeyStructOutput];
    };
}
export declare namespace StdInvariant {
    type FuzzSelectorStruct = {
        addr: PromiseOrValue<string>;
        selectors: PromiseOrValue<BytesLike>[];
    };
    type FuzzSelectorStructOutput = [string, string[]] & {
        addr: string;
        selectors: string[];
    };
}
export interface WormholeRelayerTestsInterface extends utils.Interface {
    functions: {
        "IS_TEST()": FunctionFragment;
        "checkInstructionEquality(bytes,(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,bytes32,bytes32,bytes32,(uint16,bytes32,uint64)[]))": FunctionFragment;
        "checkRedeliveryInstructionEquality(bytes,((uint16,bytes32,uint64),uint16,uint256,bytes,bytes32,bytes32))": FunctionFragment;
        "checkVaaKey(bytes,uint256,(uint16,bytes32,uint64))": FunctionFragment;
        "excludeArtifacts()": FunctionFragment;
        "excludeContracts()": FunctionFragment;
        "excludeSenders()": FunctionFragment;
        "failed()": FunctionFragment;
        "setUp()": FunctionFragment;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)": FunctionFragment;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)": FunctionFragment;
        "standardAssume((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)": FunctionFragment;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)": FunctionFragment;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)": FunctionFragment;
        "targetArtifactSelectors()": FunctionFragment;
        "targetArtifacts()": FunctionFragment;
        "targetContracts()": FunctionFragment;
        "targetSelectors()": FunctionFragment;
        "targetSenders()": FunctionFragment;
        "testAttackForwardRequestCache((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testDeliveryData((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testDeliveryWithOverrides((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testEncodeAndDecodeDeliveryInstruction(bytes)": FunctionFragment;
        "testExecuteInstructionTruncatesLongRevertBuffers((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)": FunctionFragment;
        "testForward((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes,bytes)": FunctionFragment;
        "testForwardFailure((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testForwardTester((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForAForward((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForAForwardFailure((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForAResend((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForASend((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForASendCrossChainRefundFailProviderNotSupported((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForASendCrossChainRefundNotEnough((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForASendCrossChainRefundSuccess((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForASendFailureDueToGasExceeded((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testFundsCorrectForASendFailureDueToRevert((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testMultipleForwards((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes,bytes)": FunctionFragment;
        "testReplayProtection((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testReplayProtectionDoesNotFireWhenItShouldNot((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testResend((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testResendFailAndSucceed((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryInsufficientRelayerFunds((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryInvalidDeliveryVAA((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryInvalidEmitter((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryReentrantCall((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testRevertDeliveryTargetChainIsNotThisChain((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryVaaKeysDoNotMatchVaas((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryWithOverrideGasLimit((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryWithOverrideMaximumRefund((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryWithOverrideReceiverValue((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertForwardForwardRequestFromWrongAddress((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testRevertForwardNoDeliveryInProgress((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testRevertForwardProviderNotSupported((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testRevertResendProviderNotSupported((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64))": FunctionFragment;
        "testRevertSendMsgValueTooHigh((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertSendMsgValueTooLow((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testRevertSendProviderNotSupported((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testSend((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),bytes)": FunctionFragment;
        "testSendCheckConsistencyLevel((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint8)": FunctionFragment;
        "testToAndFromWormholeFormat(address)": FunctionFragment;
        "testUnitTestResend((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),((uint16,bytes32,uint64),uint128,uint32,address))": FunctionFragment;
        "testUnitTestSend((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),(address,bytes,uint128,uint128,uint32,uint16,address,tuple[3]))": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "IS_TEST" | "checkInstructionEquality" | "checkRedeliveryInstructionEquality" | "checkVaaKey" | "excludeArtifacts" | "excludeContracts" | "excludeSenders" | "failed" | "setUp" | "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)" | "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)" | "standardAssume" | "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)" | "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)" | "targetArtifactSelectors" | "targetArtifacts" | "targetContracts" | "targetSelectors" | "targetSenders" | "testAttackForwardRequestCache" | "testDeliveryData" | "testDeliveryWithOverrides" | "testEncodeAndDecodeDeliveryInstruction" | "testExecuteInstructionTruncatesLongRevertBuffers" | "testForward" | "testForwardFailure" | "testForwardTester" | "testFundsCorrectForAForward" | "testFundsCorrectForAForwardFailure" | "testFundsCorrectForAResend" | "testFundsCorrectForASend" | "testFundsCorrectForASendCrossChainRefundFailProviderNotSupported" | "testFundsCorrectForASendCrossChainRefundNotEnough" | "testFundsCorrectForASendCrossChainRefundSuccess" | "testFundsCorrectForASendFailureDueToGasExceeded" | "testFundsCorrectForASendFailureDueToRevert" | "testMultipleForwards" | "testReplayProtection" | "testReplayProtectionDoesNotFireWhenItShouldNot" | "testResend" | "testResendFailAndSucceed" | "testRevertDeliveryInsufficientRelayerFunds" | "testRevertDeliveryInvalidDeliveryVAA" | "testRevertDeliveryInvalidEmitter" | "testRevertDeliveryReentrantCall" | "testRevertDeliveryTargetChainIsNotThisChain" | "testRevertDeliveryVaaKeysDoNotMatchVaas" | "testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength" | "testRevertDeliveryWithOverrideGasLimit" | "testRevertDeliveryWithOverrideMaximumRefund" | "testRevertDeliveryWithOverrideReceiverValue" | "testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion" | "testRevertForwardForwardRequestFromWrongAddress" | "testRevertForwardNoDeliveryInProgress" | "testRevertForwardProviderNotSupported" | "testRevertResendProviderNotSupported" | "testRevertSendMsgValueTooHigh" | "testRevertSendMsgValueTooLow" | "testRevertSendProviderNotSupported" | "testSend" | "testSendCheckConsistencyLevel" | "testToAndFromWormholeFormat" | "testUnitTestResend" | "testUnitTestSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
    encodeFunctionData(functionFragment: "checkInstructionEquality", values: [PromiseOrValue<BytesLike>, DeliveryInstructionStruct]): string;
    encodeFunctionData(functionFragment: "checkRedeliveryInstructionEquality", values: [PromiseOrValue<BytesLike>, RedeliveryInstructionStruct]): string;
    encodeFunctionData(functionFragment: "checkVaaKey", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        VaaKeyStruct
    ]): string;
    encodeFunctionData(functionFragment: "excludeArtifacts", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeContracts", values?: undefined): string;
    encodeFunctionData(functionFragment: "excludeSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "failed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
    encodeFunctionData(functionFragment: "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "standardAssume", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "targetArtifactSelectors", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetArtifacts", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetContracts", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetSelectors", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetSenders", values?: undefined): string;
    encodeFunctionData(functionFragment: "testAttackForwardRequestCache", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testDeliveryData", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testDeliveryWithOverrides", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testEncodeAndDecodeDeliveryInstruction", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "testExecuteInstructionTruncatesLongRevertBuffers", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "testForward", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testForwardFailure", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testForwardTester", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForAForward", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForAForwardFailure", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForAResend", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForASend", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForASendCrossChainRefundFailProviderNotSupported", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForASendCrossChainRefundNotEnough", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForASendCrossChainRefundSuccess", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForASendFailureDueToGasExceeded", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testFundsCorrectForASendFailureDueToRevert", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testMultipleForwards", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testReplayProtection", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testReplayProtectionDoesNotFireWhenItShouldNot", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testResend", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testResendFailAndSucceed", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryInsufficientRelayerFunds", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryInvalidDeliveryVAA", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryInvalidEmitter", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryReentrantCall", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryTargetChainIsNotThisChain", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryVaaKeysDoNotMatchVaas", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryWithOverrideGasLimit", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryWithOverrideMaximumRefund", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryWithOverrideReceiverValue", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertForwardForwardRequestFromWrongAddress", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testRevertForwardNoDeliveryInProgress", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testRevertForwardProviderNotSupported", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testRevertResendProviderNotSupported", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct
    ]): string;
    encodeFunctionData(functionFragment: "testRevertSendMsgValueTooHigh", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertSendMsgValueTooLow", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testRevertSendProviderNotSupported", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testSend", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "testSendCheckConsistencyLevel", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "testToAndFromWormholeFormat", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "testUnitTestResend", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        WormholeRelayerTests.UnitTestResendParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "testUnitTestSend", values: [
        WormholeRelayerTests.GasParametersStruct,
        WormholeRelayerTests.FeeParametersStruct,
        WormholeRelayerTests.UnitTestParamsStruct
    ]): string;
    decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkInstructionEquality", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkRedeliveryInstructionEquality", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkVaaKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeArtifacts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "excludeSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "standardAssume", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetArtifactSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetArtifacts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetSelectors", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetSenders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testAttackForwardRequestCache", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testDeliveryData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testDeliveryWithOverrides", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testEncodeAndDecodeDeliveryInstruction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testExecuteInstructionTruncatesLongRevertBuffers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testForward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testForwardFailure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testForwardTester", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForAForward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForAForwardFailure", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForAResend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForASend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForASendCrossChainRefundFailProviderNotSupported", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForASendCrossChainRefundNotEnough", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForASendCrossChainRefundSuccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForASendFailureDueToGasExceeded", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testFundsCorrectForASendFailureDueToRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testMultipleForwards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testReplayProtection", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testReplayProtectionDoesNotFireWhenItShouldNot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testResend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testResendFailAndSucceed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryInsufficientRelayerFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryInvalidDeliveryVAA", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryInvalidEmitter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryReentrantCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryTargetChainIsNotThisChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryVaaKeysDoNotMatchVaas", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryWithOverrideGasLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryWithOverrideMaximumRefund", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryWithOverrideReceiverValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertForwardForwardRequestFromWrongAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertForwardNoDeliveryInProgress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertForwardProviderNotSupported", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertResendProviderNotSupported", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertSendMsgValueTooHigh", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertSendMsgValueTooLow", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testRevertSendProviderNotSupported", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testSendCheckConsistencyLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testToAndFromWormholeFormat", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testUnitTestResend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "testUnitTestSend", data: BytesLike): Result;
    events: {
        "log(string)": EventFragment;
        "log_address(address)": EventFragment;
        "log_array(uint256[])": EventFragment;
        "log_array(int256[])": EventFragment;
        "log_array(address[])": EventFragment;
        "log_bytes(bytes)": EventFragment;
        "log_bytes32(bytes32)": EventFragment;
        "log_int(int256)": EventFragment;
        "log_named_address(string,address)": EventFragment;
        "log_named_array(string,uint256[])": EventFragment;
        "log_named_array(string,int256[])": EventFragment;
        "log_named_array(string,address[])": EventFragment;
        "log_named_bytes(string,bytes)": EventFragment;
        "log_named_bytes32(string,bytes32)": EventFragment;
        "log_named_decimal_int(string,int256,uint256)": EventFragment;
        "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
        "log_named_int(string,int256)": EventFragment;
        "log_named_string(string,string)": EventFragment;
        "log_named_uint(string,uint256)": EventFragment;
        "log_string(string)": EventFragment;
        "log_uint(uint256)": EventFragment;
        "logs(bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,uint256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,int256[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_array(string,address[])"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}
export interface logEventObject {
    arg0: string;
}
export declare type logEvent = TypedEvent<[string], logEventObject>;
export declare type logEventFilter = TypedEventFilter<logEvent>;
export interface log_addressEventObject {
    arg0: string;
}
export declare type log_addressEvent = TypedEvent<[string], log_addressEventObject>;
export declare type log_addressEventFilter = TypedEventFilter<log_addressEvent>;
export interface log_array_uint256_array_EventObject {
    val: BigNumber[];
}
export declare type log_array_uint256_array_Event = TypedEvent<[
    BigNumber[]
], log_array_uint256_array_EventObject>;
export declare type log_array_uint256_array_EventFilter = TypedEventFilter<log_array_uint256_array_Event>;
export interface log_array_int256_array_EventObject {
    val: BigNumber[];
}
export declare type log_array_int256_array_Event = TypedEvent<[
    BigNumber[]
], log_array_int256_array_EventObject>;
export declare type log_array_int256_array_EventFilter = TypedEventFilter<log_array_int256_array_Event>;
export interface log_array_address_array_EventObject {
    val: string[];
}
export declare type log_array_address_array_Event = TypedEvent<[
    string[]
], log_array_address_array_EventObject>;
export declare type log_array_address_array_EventFilter = TypedEventFilter<log_array_address_array_Event>;
export interface log_bytesEventObject {
    arg0: string;
}
export declare type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;
export declare type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;
export interface log_bytes32EventObject {
    arg0: string;
}
export declare type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;
export declare type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;
export interface log_intEventObject {
    arg0: BigNumber;
}
export declare type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;
export declare type log_intEventFilter = TypedEventFilter<log_intEvent>;
export interface log_named_addressEventObject {
    key: string;
    val: string;
}
export declare type log_named_addressEvent = TypedEvent<[
    string,
    string
], log_named_addressEventObject>;
export declare type log_named_addressEventFilter = TypedEventFilter<log_named_addressEvent>;
export interface log_named_array_string_uint256_array_EventObject {
    key: string;
    val: BigNumber[];
}
export declare type log_named_array_string_uint256_array_Event = TypedEvent<[
    string,
    BigNumber[]
], log_named_array_string_uint256_array_EventObject>;
export declare type log_named_array_string_uint256_array_EventFilter = TypedEventFilter<log_named_array_string_uint256_array_Event>;
export interface log_named_array_string_int256_array_EventObject {
    key: string;
    val: BigNumber[];
}
export declare type log_named_array_string_int256_array_Event = TypedEvent<[
    string,
    BigNumber[]
], log_named_array_string_int256_array_EventObject>;
export declare type log_named_array_string_int256_array_EventFilter = TypedEventFilter<log_named_array_string_int256_array_Event>;
export interface log_named_array_string_address_array_EventObject {
    key: string;
    val: string[];
}
export declare type log_named_array_string_address_array_Event = TypedEvent<[
    string,
    string[]
], log_named_array_string_address_array_EventObject>;
export declare type log_named_array_string_address_array_EventFilter = TypedEventFilter<log_named_array_string_address_array_Event>;
export interface log_named_bytesEventObject {
    key: string;
    val: string;
}
export declare type log_named_bytesEvent = TypedEvent<[
    string,
    string
], log_named_bytesEventObject>;
export declare type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;
export interface log_named_bytes32EventObject {
    key: string;
    val: string;
}
export declare type log_named_bytes32Event = TypedEvent<[
    string,
    string
], log_named_bytes32EventObject>;
export declare type log_named_bytes32EventFilter = TypedEventFilter<log_named_bytes32Event>;
export interface log_named_decimal_intEventObject {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
}
export declare type log_named_decimal_intEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], log_named_decimal_intEventObject>;
export declare type log_named_decimal_intEventFilter = TypedEventFilter<log_named_decimal_intEvent>;
export interface log_named_decimal_uintEventObject {
    key: string;
    val: BigNumber;
    decimals: BigNumber;
}
export declare type log_named_decimal_uintEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], log_named_decimal_uintEventObject>;
export declare type log_named_decimal_uintEventFilter = TypedEventFilter<log_named_decimal_uintEvent>;
export interface log_named_intEventObject {
    key: string;
    val: BigNumber;
}
export declare type log_named_intEvent = TypedEvent<[
    string,
    BigNumber
], log_named_intEventObject>;
export declare type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;
export interface log_named_stringEventObject {
    key: string;
    val: string;
}
export declare type log_named_stringEvent = TypedEvent<[
    string,
    string
], log_named_stringEventObject>;
export declare type log_named_stringEventFilter = TypedEventFilter<log_named_stringEvent>;
export interface log_named_uintEventObject {
    key: string;
    val: BigNumber;
}
export declare type log_named_uintEvent = TypedEvent<[
    string,
    BigNumber
], log_named_uintEventObject>;
export declare type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;
export interface log_stringEventObject {
    arg0: string;
}
export declare type log_stringEvent = TypedEvent<[string], log_stringEventObject>;
export declare type log_stringEventFilter = TypedEventFilter<log_stringEvent>;
export interface log_uintEventObject {
    arg0: BigNumber;
}
export declare type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;
export declare type log_uintEventFilter = TypedEventFilter<log_uintEvent>;
export interface logsEventObject {
    arg0: string;
}
export declare type logsEvent = TypedEvent<[string], logsEventObject>;
export declare type logsEventFilter = TypedEventFilter<logsEvent>;
export interface WormholeRelayerTests extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WormholeRelayerTestsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;
        checkInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: DeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkRedeliveryInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: RedeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkVaaKey(data: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, vaaKey: VaaKeyStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        excludeArtifacts(overrides?: CallOverrides): Promise<[string[]] & {
            excludedArtifacts_: string[];
        }>;
        excludeContracts(overrides?: CallOverrides): Promise<[string[]] & {
            excludedContracts_: string[];
        }>;
        excludeSenders(overrides?: CallOverrides): Promise<[string[]] & {
            excludedSenders_: string[];
        }>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        standardAssume(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<[
            StdInvariant.FuzzSelectorStructOutput[]
        ] & {
            targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
        }>;
        targetArtifacts(overrides?: CallOverrides): Promise<[string[]] & {
            targetedArtifacts_: string[];
        }>;
        targetContracts(overrides?: CallOverrides): Promise<[string[]] & {
            targetedContracts_: string[];
        }>;
        targetSelectors(overrides?: CallOverrides): Promise<[
            StdInvariant.FuzzSelectorStructOutput[]
        ] & {
            targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
        }>;
        targetSenders(overrides?: CallOverrides): Promise<[string[]] & {
            targetedSenders_: string[];
        }>;
        testAttackForwardRequestCache(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testDeliveryData(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testDeliveryWithOverrides(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testEncodeAndDecodeDeliveryInstruction(payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testExecuteInstructionTruncatesLongRevertBuffers(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testForwardTester(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForAForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForAForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForAResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForASend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForASendCrossChainRefundFailProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForASendCrossChainRefundNotEnough(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForASendCrossChainRefundSuccess(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForASendFailureDueToGasExceeded(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testFundsCorrectForASendFailureDueToRevert(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testMultipleForwards(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testReplayProtection(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testReplayProtectionDoesNotFireWhenItShouldNot(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testResendFailAndSucceed(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryInsufficientRelayerFunds(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryInvalidDeliveryVAA(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryInvalidEmitter(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryReentrantCall(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryTargetChainIsNotThisChain(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryVaaKeysDoNotMatchVaas(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryWithOverrideGasLimit(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryWithOverrideMaximumRefund(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryWithOverrideReceiverValue(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertForwardForwardRequestFromWrongAddress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertForwardNoDeliveryInProgress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertForwardProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertResendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertSendMsgValueTooHigh(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertSendMsgValueTooLow(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testRevertSendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testSendCheckConsistencyLevel(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testToAndFromWormholeFormat(msg1: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testUnitTestResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestResendParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        testUnitTestSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;
    checkInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: DeliveryInstructionStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkRedeliveryInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: RedeliveryInstructionStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkVaaKey(data: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, vaaKey: VaaKeyStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;
    excludeContracts(overrides?: CallOverrides): Promise<string[]>;
    excludeSenders(overrides?: CallOverrides): Promise<string[]>;
    failed(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUp(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    standardAssume(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    targetArtifactSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;
    targetContracts(overrides?: CallOverrides): Promise<string[]>;
    targetSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
    targetSenders(overrides?: CallOverrides): Promise<string[]>;
    testAttackForwardRequestCache(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testDeliveryData(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testDeliveryWithOverrides(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testEncodeAndDecodeDeliveryInstruction(payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testExecuteInstructionTruncatesLongRevertBuffers(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testForwardTester(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForAForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForAForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForAResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForASend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForASendCrossChainRefundFailProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForASendCrossChainRefundNotEnough(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForASendCrossChainRefundSuccess(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForASendFailureDueToGasExceeded(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testFundsCorrectForASendFailureDueToRevert(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testMultipleForwards(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testReplayProtection(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testReplayProtectionDoesNotFireWhenItShouldNot(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testResendFailAndSucceed(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryInsufficientRelayerFunds(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryInvalidDeliveryVAA(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryInvalidEmitter(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryReentrantCall(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryTargetChainIsNotThisChain(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryVaaKeysDoNotMatchVaas(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryWithOverrideGasLimit(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryWithOverrideMaximumRefund(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryWithOverrideReceiverValue(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertForwardForwardRequestFromWrongAddress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertForwardNoDeliveryInProgress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertForwardProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertResendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertSendMsgValueTooHigh(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertSendMsgValueTooLow(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testRevertSendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testSendCheckConsistencyLevel(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testToAndFromWormholeFormat(msg1: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testUnitTestResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestResendParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    testUnitTestSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        IS_TEST(overrides?: CallOverrides): Promise<boolean>;
        checkInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: DeliveryInstructionStruct, overrides?: CallOverrides): Promise<void>;
        checkRedeliveryInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: RedeliveryInstructionStruct, overrides?: CallOverrides): Promise<void>;
        checkVaaKey(data: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, vaaKey: VaaKeyStruct, overrides?: CallOverrides): Promise<BigNumber>;
        excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;
        excludeContracts(overrides?: CallOverrides): Promise<string[]>;
        excludeSenders(overrides?: CallOverrides): Promise<string[]>;
        failed(overrides?: CallOverrides): Promise<boolean>;
        setUp(overrides?: CallOverrides): Promise<void>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            WormholeRelayerTests.StandardSetupTwoChainsStructOutput,
            WormholeRelayerTests.FundsCorrectTestStructOutput
        ] & {
            s: WormholeRelayerTests.StandardSetupTwoChainsStructOutput;
            test: WormholeRelayerTests.FundsCorrectTestStructOutput;
        }>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            WormholeRelayerTests.StandardSetupTwoChainsStructOutput,
            WormholeRelayerTests.FundsCorrectTestStructOutput
        ] & {
            s: WormholeRelayerTests.StandardSetupTwoChainsStructOutput;
            test: WormholeRelayerTests.FundsCorrectTestStructOutput;
        }>;
        standardAssume(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<WormholeRelayerTests.StandardSetupTwoChainsStructOutput>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<WormholeRelayerTests.StandardSetupTwoChainsStructOutput>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
        targetArtifacts(overrides?: CallOverrides): Promise<string[]>;
        targetContracts(overrides?: CallOverrides): Promise<string[]>;
        targetSelectors(overrides?: CallOverrides): Promise<StdInvariant.FuzzSelectorStructOutput[]>;
        targetSenders(overrides?: CallOverrides): Promise<string[]>;
        testAttackForwardRequestCache(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testDeliveryData(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testDeliveryWithOverrides(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testEncodeAndDecodeDeliveryInstruction(payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testExecuteInstructionTruncatesLongRevertBuffers(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testForwardTester(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForAForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForAForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForAResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForASend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForASendCrossChainRefundFailProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForASendCrossChainRefundNotEnough(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForASendCrossChainRefundSuccess(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForASendFailureDueToGasExceeded(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testFundsCorrectForASendFailureDueToRevert(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testMultipleForwards(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testReplayProtection(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testReplayProtectionDoesNotFireWhenItShouldNot(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testResendFailAndSucceed(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryInsufficientRelayerFunds(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryInvalidDeliveryVAA(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryInvalidEmitter(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryReentrantCall(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryTargetChainIsNotThisChain(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryVaaKeysDoNotMatchVaas(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryWithOverrideGasLimit(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryWithOverrideMaximumRefund(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryWithOverrideReceiverValue(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertForwardForwardRequestFromWrongAddress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testRevertForwardNoDeliveryInProgress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testRevertForwardProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testRevertResendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: CallOverrides): Promise<void>;
        testRevertSendMsgValueTooHigh(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertSendMsgValueTooLow(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testRevertSendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        testSendCheckConsistencyLevel(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        testToAndFromWormholeFormat(msg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        testUnitTestResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestResendParamsStruct, overrides?: CallOverrides): Promise<void>;
        testUnitTestSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestParamsStruct, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "log(string)"(arg0?: null): logEventFilter;
        log(arg0?: null): logEventFilter;
        "log_address(address)"(arg0?: null): log_addressEventFilter;
        log_address(arg0?: null): log_addressEventFilter;
        "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
        "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
        "log_array(address[])"(val?: null): log_array_address_array_EventFilter;
        "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
        log_bytes(arg0?: null): log_bytesEventFilter;
        "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
        log_bytes32(arg0?: null): log_bytes32EventFilter;
        "log_int(int256)"(arg0?: null): log_intEventFilter;
        log_int(arg0?: null): log_intEventFilter;
        "log_named_address(string,address)"(key?: null, val?: null): log_named_addressEventFilter;
        log_named_address(key?: null, val?: null): log_named_addressEventFilter;
        "log_named_array(string,uint256[])"(key?: null, val?: null): log_named_array_string_uint256_array_EventFilter;
        "log_named_array(string,int256[])"(key?: null, val?: null): log_named_array_string_int256_array_EventFilter;
        "log_named_array(string,address[])"(key?: null, val?: null): log_named_array_string_address_array_EventFilter;
        "log_named_bytes(string,bytes)"(key?: null, val?: null): log_named_bytesEventFilter;
        log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;
        "log_named_bytes32(string,bytes32)"(key?: null, val?: null): log_named_bytes32EventFilter;
        log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;
        "log_named_decimal_int(string,int256,uint256)"(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;
        log_named_decimal_int(key?: null, val?: null, decimals?: null): log_named_decimal_intEventFilter;
        "log_named_decimal_uint(string,uint256,uint256)"(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;
        log_named_decimal_uint(key?: null, val?: null, decimals?: null): log_named_decimal_uintEventFilter;
        "log_named_int(string,int256)"(key?: null, val?: null): log_named_intEventFilter;
        log_named_int(key?: null, val?: null): log_named_intEventFilter;
        "log_named_string(string,string)"(key?: null, val?: null): log_named_stringEventFilter;
        log_named_string(key?: null, val?: null): log_named_stringEventFilter;
        "log_named_uint(string,uint256)"(key?: null, val?: null): log_named_uintEventFilter;
        log_named_uint(key?: null, val?: null): log_named_uintEventFilter;
        "log_string(string)"(arg0?: null): log_stringEventFilter;
        log_string(arg0?: null): log_stringEventFilter;
        "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
        log_uint(arg0?: null): log_uintEventFilter;
        "logs(bytes)"(arg0?: null): logsEventFilter;
        logs(arg0?: null): logsEventFilter;
    };
    estimateGas: {
        IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;
        checkInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: DeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkRedeliveryInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: RedeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkVaaKey(data: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, vaaKey: VaaKeyStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;
        excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;
        excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        standardAssume(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;
        targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;
        targetContracts(overrides?: CallOverrides): Promise<BigNumber>;
        targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;
        targetSenders(overrides?: CallOverrides): Promise<BigNumber>;
        testAttackForwardRequestCache(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testDeliveryData(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testDeliveryWithOverrides(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testEncodeAndDecodeDeliveryInstruction(payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testExecuteInstructionTruncatesLongRevertBuffers(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testForwardTester(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForAForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForAForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForAResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForASend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForASendCrossChainRefundFailProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForASendCrossChainRefundNotEnough(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForASendCrossChainRefundSuccess(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForASendFailureDueToGasExceeded(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testFundsCorrectForASendFailureDueToRevert(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testMultipleForwards(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testReplayProtection(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testReplayProtectionDoesNotFireWhenItShouldNot(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testResendFailAndSucceed(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryInsufficientRelayerFunds(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryInvalidDeliveryVAA(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryInvalidEmitter(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryReentrantCall(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryTargetChainIsNotThisChain(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryVaaKeysDoNotMatchVaas(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryWithOverrideGasLimit(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryWithOverrideMaximumRefund(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryWithOverrideReceiverValue(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertForwardForwardRequestFromWrongAddress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertForwardNoDeliveryInProgress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertForwardProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertResendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertSendMsgValueTooHigh(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertSendMsgValueTooLow(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testRevertSendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testSendCheckConsistencyLevel(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testToAndFromWormholeFormat(msg1: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testUnitTestResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestResendParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        testUnitTestSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: DeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkRedeliveryInstructionEquality(data: PromiseOrValue<BytesLike>, expectedInstruction: RedeliveryInstructionStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkVaaKey(data: PromiseOrValue<BytesLike>, _index: PromiseOrValue<BigNumberish>, vaaKey: VaaKeyStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        failed(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUp(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "setupFundsCorrectTest((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        standardAssume(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint256)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "standardAssumeAndSetupTwoChains((uint32,uint32,uint56,uint56),(uint56,uint56,uint32,uint32,uint64),uint32)"(gasParams_: WormholeRelayerTests.GasParametersStruct, feeParams_: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        targetArtifactSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        testAttackForwardRequestCache(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testDeliveryData(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testDeliveryWithOverrides(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testEncodeAndDecodeDeliveryInstruction(payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testExecuteInstructionTruncatesLongRevertBuffers(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, minTargetGasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testForwardTester(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForAForward(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForAForwardFailure(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForAResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForASend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForASendCrossChainRefundFailProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForASendCrossChainRefundNotEnough(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForASendCrossChainRefundSuccess(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForASendFailureDueToGasExceeded(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testFundsCorrectForASendFailureDueToRevert(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testMultipleForwards(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, forwardedMessage: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testReplayProtection(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testReplayProtectionDoesNotFireWhenItShouldNot(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testResendFailAndSucceed(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryInsufficientRelayerFunds(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryInvalidDeliveryVAA(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryInvalidEmitter(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryReentrantCall(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryTargetChainIsNotThisChain(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryVaaKeysDoNotMatchVaas(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryVaaKeysLengthDoesNotMatchVaasLength(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryWithOverrideGasLimit(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryWithOverrideMaximumRefund(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryWithOverrideReceiverValue(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertDeliveryWithOverrideUnexpectedExecutionInfoVersion(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertForwardForwardRequestFromWrongAddress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertForwardNoDeliveryInProgress(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertForwardProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertResendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertSendMsgValueTooHigh(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertSendMsgValueTooLow(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testRevertSendProviderNotSupported(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testSendCheckConsistencyLevel(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testToAndFromWormholeFormat(msg1: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testUnitTestResend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestResendParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        testUnitTestSend(gasParams: WormholeRelayerTests.GasParametersStruct, feeParams: WormholeRelayerTests.FeeParametersStruct, params: WormholeRelayerTests.UnitTestParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
