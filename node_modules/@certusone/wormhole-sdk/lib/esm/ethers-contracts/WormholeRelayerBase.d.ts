import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface WormholeRelayerBaseInterface extends utils.Interface {
    functions: {
        "deliveryAttempted(bytes32)": FunctionFragment;
        "deliveryFailureBlock(bytes32)": FunctionFragment;
        "deliverySuccessBlock(bytes32)": FunctionFragment;
        "getRegisteredWormholeRelayerContract(uint16)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "deliveryAttempted" | "deliveryFailureBlock" | "deliverySuccessBlock" | "getRegisteredWormholeRelayerContract"): FunctionFragment;
    encodeFunctionData(functionFragment: "deliveryAttempted", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliveryFailureBlock", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliverySuccessBlock", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRegisteredWormholeRelayerContract", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "deliveryAttempted", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliveryFailureBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverySuccessBlock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredWormholeRelayerContract", data: BytesLike): Result;
    events: {
        "SendEvent(uint64,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SendEvent"): EventFragment;
}
export interface SendEventEventObject {
    sequence: BigNumber;
    deliveryQuote: BigNumber;
    paymentForExtraReceiverValue: BigNumber;
}
export declare type SendEventEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber
], SendEventEventObject>;
export declare type SendEventEventFilter = TypedEventFilter<SendEventEvent>;
export interface WormholeRelayerBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WormholeRelayerBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            attempted: boolean;
        }>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            blockNumber: BigNumber;
        }>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            blockNumber: BigNumber;
        }>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "SendEvent(uint64,uint256,uint256)"(sequence?: PromiseOrValue<BigNumberish> | null, deliveryQuote?: null, paymentForExtraReceiverValue?: null): SendEventEventFilter;
        SendEvent(sequence?: PromiseOrValue<BigNumberish> | null, deliveryQuote?: null, paymentForExtraReceiverValue?: null): SendEventEventFilter;
    };
    estimateGas: {
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        deliveryAttempted(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliveryFailureBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliverySuccessBlock(deliveryHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredWormholeRelayerContract(chainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
