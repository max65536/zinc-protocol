import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace IWormhole {
    type SignatureStruct = {
        r: PromiseOrValue<BytesLike>;
        s: PromiseOrValue<BytesLike>;
        v: PromiseOrValue<BigNumberish>;
        guardianIndex: PromiseOrValue<BigNumberish>;
    };
    type SignatureStructOutput = [string, string, number, number] & {
        r: string;
        s: string;
        v: number;
        guardianIndex: number;
    };
    type VMStruct = {
        version: PromiseOrValue<BigNumberish>;
        timestamp: PromiseOrValue<BigNumberish>;
        nonce: PromiseOrValue<BigNumberish>;
        emitterChainId: PromiseOrValue<BigNumberish>;
        emitterAddress: PromiseOrValue<BytesLike>;
        sequence: PromiseOrValue<BigNumberish>;
        consistencyLevel: PromiseOrValue<BigNumberish>;
        payload: PromiseOrValue<BytesLike>;
        guardianSetIndex: PromiseOrValue<BigNumberish>;
        signatures: IWormhole.SignatureStruct[];
        hash: PromiseOrValue<BytesLike>;
    };
    type VMStructOutput = [
        number,
        number,
        number,
        number,
        string,
        BigNumber,
        number,
        string,
        number,
        IWormhole.SignatureStructOutput[],
        string
    ] & {
        version: number;
        timestamp: number;
        nonce: number;
        emitterChainId: number;
        emitterAddress: string;
        sequence: BigNumber;
        consistencyLevel: number;
        payload: string;
        guardianSetIndex: number;
        signatures: IWormhole.SignatureStructOutput[];
        hash: string;
    };
}
export declare namespace VmSafe {
    type LogStruct = {
        topics: PromiseOrValue<BytesLike>[];
        data: PromiseOrValue<BytesLike>;
        emitter: PromiseOrValue<string>;
    };
    type LogStructOutput = [string[], string, string] & {
        topics: string[];
        data: string;
        emitter: string;
    };
}
export interface WormholeSimulatorInterface extends utils.Interface {
    functions: {
        "encodeAndSignMessage((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": FunctionFragment;
        "encodeObservation((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": FunctionFragment;
        "fetchSignedMessageFromLogs((bytes32[],bytes,address),uint16,address)": FunctionFragment;
        "fetchWormholeMessageFromLog((bytes32[],bytes,address)[])": FunctionFragment;
        "invalidateVM(bytes)": FunctionFragment;
        "parseVMFromLogs((bytes32[],bytes,address))": FunctionFragment;
        "setMessageFee(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "encodeAndSignMessage" | "encodeObservation" | "fetchSignedMessageFromLogs" | "fetchWormholeMessageFromLog" | "invalidateVM" | "parseVMFromLogs" | "setMessageFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "encodeAndSignMessage", values: [IWormhole.VMStruct]): string;
    encodeFunctionData(functionFragment: "encodeObservation", values: [IWormhole.VMStruct]): string;
    encodeFunctionData(functionFragment: "fetchSignedMessageFromLogs", values: [
        VmSafe.LogStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "fetchWormholeMessageFromLog", values: [VmSafe.LogStruct[]]): string;
    encodeFunctionData(functionFragment: "invalidateVM", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "parseVMFromLogs", values: [VmSafe.LogStruct]): string;
    encodeFunctionData(functionFragment: "setMessageFee", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "encodeAndSignMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "encodeObservation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fetchSignedMessageFromLogs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fetchWormholeMessageFromLog", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "invalidateVM", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "parseVMFromLogs", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMessageFee", data: BytesLike): Result;
    events: {};
}
export interface WormholeSimulator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WormholeSimulatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        encodeAndSignMessage(vm_: IWormhole.VMStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        encodeObservation(vm_: IWormhole.VMStruct, overrides?: CallOverrides): Promise<[string] & {
            encodedObservation: string;
        }>;
        fetchSignedMessageFromLogs(log: VmSafe.LogStruct, emitterChainId: PromiseOrValue<BigNumberish>, emitterAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fetchWormholeMessageFromLog(logs: VmSafe.LogStruct[], overrides?: CallOverrides): Promise<[VmSafe.LogStructOutput[]]>;
        invalidateVM(message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        parseVMFromLogs(log: VmSafe.LogStruct, overrides?: CallOverrides): Promise<[IWormhole.VMStructOutput] & {
            vm_: IWormhole.VMStructOutput;
        }>;
        setMessageFee(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    encodeAndSignMessage(vm_: IWormhole.VMStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    encodeObservation(vm_: IWormhole.VMStruct, overrides?: CallOverrides): Promise<string>;
    fetchSignedMessageFromLogs(log: VmSafe.LogStruct, emitterChainId: PromiseOrValue<BigNumberish>, emitterAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fetchWormholeMessageFromLog(logs: VmSafe.LogStruct[], overrides?: CallOverrides): Promise<VmSafe.LogStructOutput[]>;
    invalidateVM(message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    parseVMFromLogs(log: VmSafe.LogStruct, overrides?: CallOverrides): Promise<IWormhole.VMStructOutput>;
    setMessageFee(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        encodeAndSignMessage(vm_: IWormhole.VMStruct, overrides?: CallOverrides): Promise<string>;
        encodeObservation(vm_: IWormhole.VMStruct, overrides?: CallOverrides): Promise<string>;
        fetchSignedMessageFromLogs(log: VmSafe.LogStruct, emitterChainId: PromiseOrValue<BigNumberish>, emitterAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        fetchWormholeMessageFromLog(logs: VmSafe.LogStruct[], overrides?: CallOverrides): Promise<VmSafe.LogStructOutput[]>;
        invalidateVM(message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        parseVMFromLogs(log: VmSafe.LogStruct, overrides?: CallOverrides): Promise<IWormhole.VMStructOutput>;
        setMessageFee(newFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        encodeAndSignMessage(vm_: IWormhole.VMStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        encodeObservation(vm_: IWormhole.VMStruct, overrides?: CallOverrides): Promise<BigNumber>;
        fetchSignedMessageFromLogs(log: VmSafe.LogStruct, emitterChainId: PromiseOrValue<BigNumberish>, emitterAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fetchWormholeMessageFromLog(logs: VmSafe.LogStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        invalidateVM(message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        parseVMFromLogs(log: VmSafe.LogStruct, overrides?: CallOverrides): Promise<BigNumber>;
        setMessageFee(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        encodeAndSignMessage(vm_: IWormhole.VMStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        encodeObservation(vm_: IWormhole.VMStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fetchSignedMessageFromLogs(log: VmSafe.LogStruct, emitterChainId: PromiseOrValue<BigNumberish>, emitterAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fetchWormholeMessageFromLog(logs: VmSafe.LogStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        invalidateVM(message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        parseVMFromLogs(log: VmSafe.LogStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setMessageFee(newFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
