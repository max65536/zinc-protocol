import { Signer, ContractFactory, BigNumberish, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { AttackForwardIntegration, AttackForwardIntegrationInterface } from "../AttackForwardIntegration";
declare type AttackForwardIntegrationConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AttackForwardIntegration__factory extends ContractFactory {
    constructor(...args: AttackForwardIntegrationConstructorParams);
    deploy(initWormhole: PromiseOrValue<string>, initWormholeRelayer: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, initAttackerReward: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<AttackForwardIntegration>;
    getDeployTransaction(initWormhole: PromiseOrValue<string>, initWormholeRelayer: PromiseOrValue<string>, chainId: PromiseOrValue<BigNumberish>, initAttackerReward: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): AttackForwardIntegration;
    connect(signer: Signer): AttackForwardIntegration__factory;
    static readonly bytecode = "0x60c0346100db57601f61062538819003918201601f19168301916001600160401b038311848410176100e0578084926080946040528339810103126100db5780516001600160a01b0380821682036100db57602083015181811681036100db5760408401519361ffff851685036100db57606001519182168092036100db576000549260805260a05261075360b41b9261ffff60a01b9060a01b169160018060d01b03191617171760005560405161052e90816100f7823960805181505060a051818181605b0152818160a201528181610106015261021f0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260048036101561036c575b361561001a57600080fd5b60005460405163c23ee3c360e01b815261ffff8260a01c16838201526000602482015263ffffffff8260b01c16604482015260408160648160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561027a5760009161033a575b506040516324320c9f60e01b81529160208385817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa92831561027a576000936102f6575b506040519081602081011067ffffffffffffffff6020840111176102e15760208201604052600082527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156102dc5760405163026a476360e51b815260a082901c61ffff16868201526001600160a01b0382166024820152610160604482015260605161016482018190529094859392919060005b8281106102c457506000858301610184908101829052606487018290526084870182905260b085901c63ffffffff1660a488015260a085901c61ffff1660c48801526001600160a01b0394851660e488015293909116610104860152601f909101601f191684018481036101800161012486015283519281018390526101a4019260200191905b818110610286575050600f61014484015250600092908290039082907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561027a5761025557005b67ffffffffffffffff1061026557005b604190634e487b7160e01b6000525260246000fd5b6040513d6000823e3d90fd5b919350916020606060019267ffffffffffffffff6040885161ffff815116845285810151868501520151166040820152019401910191859392610201565b6080810151888201610184015287955060200161017a565b600080fd5b604185634e487b7160e01b6000525260246000fd5b9092506020813d602011610332575b8161031260209383610469565b810103126102dc57516001600160a01b03811681036102dc5791386100db565b3d9150610305565b90506040813d604011610364575b8161035560409383610469565b810103126102dc57513861008c565b3d9150610348565b6000803560e01c63529dca3214610383575061000f565b9060a03660031901126104655767ffffffffffffffff8135818111610461576103af90369084016104a1565b506024803582811161045d573660238201121561045d57808401359383851161044b57508360051b91806040519560209687916103ee83880183610469565b815201938301019336851161044757818301935b85851061041d578760643561ffff81160361041a5780f35b80fd5b843582811161044357879161043883928636918901016104a1565b815201940193610402565b8880fd5b8680fd5b634e487b7160e01b8652604190528185fd5b8480fd5b8380fd5b5080fd5b90601f8019910116810190811067ffffffffffffffff82111761048b57604052565b634e487b7160e01b600052604160045260246000fd5b81601f820112156102dc5780359067ffffffffffffffff821161048b57604051926104d6601f8401601f191660200185610469565b828452602083830101116102dc5781600092602080930183860137830101529056fea264697066735822122028cf41df4f124becbb8e6b02a4fa93a619543b9fc951e11643d9aeac5235364964736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract IWormhole";
            readonly name: "initWormhole";
            readonly type: "address";
        }, {
            readonly internalType: "contract IWormholeRelayer";
            readonly name: "initWormholeRelayer";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "initAttackerReward";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "additionalVaas";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sourceAddress";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint16";
            readonly name: "sourceChain";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "deliveryHash";
            readonly type: "bytes32";
        }];
        readonly name: "receiveWormholeMessages";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): AttackForwardIntegrationInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AttackForwardIntegration;
}
export {};
