import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { BytesParsing, BytesParsingInterface } from "../BytesParsing";
declare type BytesParsingConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BytesParsing__factory extends ContractFactory {
    constructor(...args: BytesParsingConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<BytesParsing>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): BytesParsing;
    connect(signer: Signer): BytesParsing__factory;
    static readonly bytecode = "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122004c043b1e4393fc02faa27cee8e2129f26a638de131f6cea5ce1c8b2e784289e64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "offset";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "length";
            readonly type: "uint256";
        }];
        readonly name: "OutOfBounds";
        readonly type: "error";
    }];
    static createInterface(): BytesParsingInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): BytesParsing;
}
export {};
