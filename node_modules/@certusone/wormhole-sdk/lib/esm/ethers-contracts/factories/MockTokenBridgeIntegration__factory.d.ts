import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockTokenBridgeIntegration, MockTokenBridgeIntegrationInterface } from "../MockTokenBridgeIntegration";
declare type MockTokenBridgeIntegrationConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockTokenBridgeIntegration__factory extends ContractFactory {
    constructor(...args: MockTokenBridgeIntegrationConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockTokenBridgeIntegration>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockTokenBridgeIntegration;
    connect(signer: Signer): MockTokenBridgeIntegration__factory;
    static readonly bytecode = "0x608080604052346100165761096b908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c90816301c3ac6b1461003a57506366d382031461003557600080fd5b61015e565b346100b45760203660031901126100b45760043567ffffffffffffffff81116100b057366023820112156100b057806004013590826100788361012c565b91610086604051938461010a565b83835236602485830101116100b057836100ad9460246020930183860137830101526103db565b80f35b5080fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176100e957604052565b6100b7565b6040810190811067ffffffffffffffff8211176100e957604052565b90601f8019910116810190811067ffffffffffffffff8211176100e957604052565b67ffffffffffffffff81116100e957601f01601f191660200190565b6001600160a01b0381160361015957565b600080fd5b346101595760203660031901126101595760043561017b81610148565b600080546001600160a01b0319166001600160a01b0392909216919091179055005b634e487b7160e01b600052601160045260246000fd5b6083198101919082116101c257565b61019d565b6063198101919082116101c257565b919082039182116101c257565b9081602091031261015957516101f881610148565b90565b6040513d6000823e3d90fd5b90816020910312610159575190565b60005b8381106102295750506000910152565b8181015183820152602001610219565b6020818303126101595780519067ffffffffffffffff8211610159570181601f8201121561015957805161026c8161012c565b9261027a604051948561010a565b81845260208284010111610159576101f89160208085019101610216565b906020916102b181518092818552858086019101610216565b601f01601f1916010190565b9060206101f8928181520190610298565b156102d557565b60405162461bcd60e51b8152602060048201526014602482015273696e76616c6964207061796c6f6164207479706560601b6044820152606490fd5b1561031857565b60405162461bcd60e51b815260206004820152603060248201527f41646472657373207061727365642066726f6d2056414120616e64207061796c60448201526f0dec2c840c8de40dcdee840dac2e8c6d60831b6064820152608490fd5b1561037d57565b60405162461bcd60e51b815260206004820152603060248201527f436861696e4964207061727365642066726f6d2056414120616e64207061796c60448201526f0dec2c840c8de40dcdee840dac2e8c6d60831b6064820152608490fd5b6103ee6103e882516101b3565b8261072d565b6104016103fb83516101c7565b836106b4565b600080546001600160a01b0394919291906104259086165b6001600160a01b031690565b604051630ff8f14360e11b815261ffff8416600482015260248101869052909560209182816044818b5afa90811561058f5786916105f0575b506040516370a0823160e01b8082523060048301529097919092169491938388602481895afa97881561058f5787986105c2575b50956104b98198998297986040519a8b8094819363c3f511c160e01b8352600483016102bd565b03925af196871561058f578597610594575b50906104fa610518926104eb600360ff6104e48c61061d565b16146102ce565b6104f4896106d0565b14610311565b61ffff61051061050989610668565b61ffff1690565b911614610376565b6040519182523060048301528082602481875afa92831561058f576105609661055a9461041994610419946105549492610562575b50506101d6565b9461071d565b90610749565b565b6105819250803d10610588575b610579818361010a565b810190610207565b388061054d565b503d61056f565b6101fb565b610518929197506105b96104fa913d8089833e6105b1818361010a565b810190610239565b979192506104cb565b87985087969791996105e36104b992873d891161058857610579818361010a565b9950999150969596610492565b6106109150833d8511610616575b610608818361010a565b8101906101e3565b3861045e565b503d6105fe565b600181511061062d576001015190565b60405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606490fd5b6043815110610678576043015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fd5b90815160028201908183116101c2571061067857016002015190565b60418151106106e0576041015190565b60405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606490fd5b60a58151106106e05760a5015190565b90815160208201908183116101c257106106e057016020015190565b60405163a9059cbb60e01b60208083019182526001600160a01b03948516602484015260448084019690965294825290929091610785846100cd565b169060405192610794846100ee565b8484527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656485850152823b15610805576107e0939260009283809351925af16107da6108c1565b906108f1565b805190816107ed57505050565b826105609361080093830101910161084a565b610862565b60405162461bcd60e51b815260048101869052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b90816020910312610159575180151581036101595790565b1561086957565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b3d156108ec573d906108d28261012c565b916108e0604051938461010a565b82523d6000602084013e565b606090565b909190156108fd575090565b81511561090d5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610931906024830190610298565b0390fdfea26469706673582212209c55aca8e1af18a5e2f76380ccef0a68628db0955f4bd2dc9b8dae1ddff762e064736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedVm";
            readonly type: "bytes";
        }];
        readonly name: "completeTransferAndSwap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_tokenBridge";
            readonly type: "address";
        }];
        readonly name: "setup";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockTokenBridgeIntegrationInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockTokenBridgeIntegration;
}
export {};
