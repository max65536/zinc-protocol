import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { NFTBridgeGetters, NFTBridgeGettersInterface } from "../NFTBridgeGetters";
declare type NFTBridgeGettersConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class NFTBridgeGetters__factory extends ContractFactory {
    constructor(...args: NFTBridgeGettersConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<NFTBridgeGetters>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): NFTBridgeGetters;
    connect(signer: Signer): NFTBridgeGetters__factory;
    static readonly bytecode = "0x6080806040523461001657610413908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182631a2be4da14610351575081631ff1e2861461030b5781632c3c02a4146102df5781632f3a3d5d146102b65781633ca648261461026157816364d42b1714610242578163739fc8d11461021f57816384acd1bb146101f75781639a8a0592146101d4578163aa4efa5b146101a7578163ad66a5f114610175578163b172b22214610156578163d60b347f1461011357508063e039f224146100f25763fbe3c2cd146100ca57600080fd5b346100ee57816003193601126100ee5760209061ffff60025460101c169051908152f35b5080fd5b50346100ee57816003193601126100ee57602090600b549051904614158152f35b90503461015257602036600319011261015257356001600160a01b0381169081900361015257818360ff92602095526006855220541690519015158152f35b8280fd5b5050346100ee57816003193601126100ee576020906003549051908152f35b5050346100ee5760203660031901126100ee578060209261ffff610197610391565b1681526009845220549051908152f35b905034610152576020366003190112610152578160209360ff923581526005855220541690519015158152f35b5050346100ee57816003193601126100ee5760209061ffff600254169051908152f35b5050346100ee57816003193601126100ee57905490516001600160a01b039091168152602090f35b5050346100ee57816003193601126100ee576002549051602091821c60ff168152f35b5050346100ee57816003193601126100ee57602090600b549051908152f35b905034610152576020366003190112610152579181928160206102826103a7565b8281520152358152600a602052206102986103a7565b60206001835493848452015491019081528251918252516020820152f35b5050346100ee57816003193601126100ee5760015490516001600160a01b039091168152602090f35b90503461015257602036600319011261015257816020938260ff93358252855220541690519015158152f35b5050346100ee57806003193601126100ee5760209161ffff61032b610391565b16815260078352818120602435825283528190205490516001600160a01b039091168152f35b9291503461038d57602036600319011261038d57356001600160a01b0381169081900361038d5783526008602090815292205460ff1615158152f35b8380fd5b6004359061ffff821682036103a257565b600080fd5b604051906040820182811067ffffffffffffffff8211176103c757604052565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c8c67c44643d13f427fd63810335d1f1f91d520aa92116e0fcf29525530787b864736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "chainId_";
            readonly type: "uint16";
        }];
        readonly name: "bridgeContracts";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "chainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "evmChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "finality";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "governanceActionIsConsumed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "governanceChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "governanceContract";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isFork";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "impl";
            readonly type: "address";
        }];
        readonly name: "isInitialized";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "isTransferCompleted";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "isWrappedAsset";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "splCache";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "name";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "symbol";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct NFTBridgeStorage.SPLCache";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "tokenImplementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "wormhole";
        readonly outputs: readonly [{
            readonly internalType: "contract IWormhole";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "tokenChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "tokenAddress";
            readonly type: "bytes32";
        }];
        readonly name: "wrappedAsset";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): NFTBridgeGettersInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): NFTBridgeGetters;
}
export {};
