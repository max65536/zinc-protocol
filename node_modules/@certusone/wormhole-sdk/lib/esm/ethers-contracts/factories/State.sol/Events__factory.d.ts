import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Events, EventsInterface } from "../../State.sol/Events";
declare type EventsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Events__factory extends ContractFactory {
    constructor(...args: EventsConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Events>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Events;
    connect(signer: Signer): Events__factory;
    static readonly bytecode = "0x60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212205e1d7f0c8904733b3c86668b39c62ef6e460cccbb522f631eebb1af6fcaa11f164736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "oldGuardianIndex";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "newGuardianIndex";
            readonly type: "uint32";
        }];
        readonly name: "LogGuardianSetChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "emitter_address";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "nonce";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly name: "LogMessagePublished";
        readonly type: "event";
    }];
    static createInterface(): EventsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Events;
}
export {};
