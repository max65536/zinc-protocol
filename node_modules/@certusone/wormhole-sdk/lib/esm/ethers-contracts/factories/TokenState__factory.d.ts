import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { TokenState, TokenStateInterface } from "../TokenState";
declare type TokenStateConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TokenState__factory extends ContractFactory {
    constructor(...args: TokenStateConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TokenState>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TokenState;
    connect(signer: Signer): TokenState__factory;
    static readonly bytecode = "0x60808060405234601457609b908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c637ecebe0014602857600080fd5b3460615760203660031901126061576004356001600160a01b03811690819003605d578260409160209452600e845220548152f35b8280fd5b5080fdfea2646970667358221220b72e051e1475c5a6d720440880da9ff5c80d4e0d37ef25fb53f41896376e584364736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner_";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): TokenStateInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TokenState;
}
export {};
