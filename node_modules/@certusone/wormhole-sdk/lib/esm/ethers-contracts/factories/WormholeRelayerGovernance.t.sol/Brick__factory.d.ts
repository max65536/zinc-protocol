import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Brick, BrickInterface } from "../../WormholeRelayerGovernance.t.sol/Brick";
declare type BrickConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Brick__factory extends ContractFactory {
    constructor(...args: BrickConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Brick>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Brick;
    connect(signer: Signer): Brick__factory;
    static readonly bytecode = "0x60808060405234601357606b908160198239f35b600080fdfe6004361015600c57600080fd5b6000803560e01c632c75470f14602157600080fd5b346032578060031936011260325780f35b80fdfea264697066735822122042f7e3210bb935a64323d16bc7b19206612ca13fc35c255fb8d278f64fbfd75a64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "checkAndExecuteUpgradeMigration";
        readonly outputs: readonly [];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): BrickInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Brick;
}
export {};
