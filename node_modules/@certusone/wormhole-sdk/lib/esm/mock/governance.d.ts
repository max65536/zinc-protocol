/// <reference types="node" />
import { MockEmitter } from "./wormhole";
export declare class GovernanceEmitter extends MockEmitter {
    constructor(emitterAddress: string, startSequence?: number);
    publishGovernanceMessage(timestamp: number, module: string, payload: Buffer, action: number, chain: number, uptickSequence?: boolean): Buffer;
    publishWormholeSetMessageFee(timestamp: number, chain: number, amount: bigint, uptickSequence?: boolean): Buffer;
    publishWormholeTransferFees(timestamp: number, chain: number, amount: bigint, recipient: Buffer, uptickSequence?: boolean): Buffer;
    publishWormholeGuardianSetUpgrade(timestamp: number, newGuardianSetIndex: number, publicKeys: Buffer[], uptickSequence?: boolean): Buffer;
    publishWormholeUpgradeContract(timestamp: number, chain: number, newContract: string, uptickSequence?: boolean): Buffer;
    publishTokenBridgeRegisterChain(timestamp: number, chain: number, address: string, uptickSequence?: boolean): Buffer;
    publishTokenBridgeUpgradeContract(timestamp: number, chain: number, newContract: string, uptickSequence?: boolean): Buffer;
    publishNftBridgeRegisterChain(timestamp: number, chain: number, address: string, uptickSequence?: boolean): Buffer;
    publishNftBridgeUpgradeContract(timestamp: number, chain: number, newContract: string, uptickSequence?: boolean): Buffer;
    publishWormholeRelayerRegisterChain(timestamp: number, chain: number, address: string, uptickSequence?: boolean): Buffer;
    publishWormholeRelayerUpgradeContract(timestamp: number, chain: number, newContract: string, uptickSequence?: boolean): Buffer;
    publishWormholeRelayerSetDefaultDeliveryProvider(timestamp: number, chain: number, newRelayProviderAddress: string, uptickSequence?: boolean): Buffer;
}
