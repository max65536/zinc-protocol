import { Commitment, Connection, PublicKeyInitData } from "@solana/web3.js";
import { LCDClient } from "@terra-money/terra.js";
import { AptosClient, TokenTypes } from "aptos";
import { ethers } from "ethers";
import { WormholeWrappedInfo } from "..";
import { ChainId, ChainName } from "../utils";
export interface WormholeWrappedNFTInfo {
    isWrapped: boolean;
    chainId: ChainId;
    assetAddress: Uint8Array;
    tokenId?: string;
}
/**
 * Returns a origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param nftBridgeAddress
 * @param provider
 * @param wrappedAddress
 * @returns
 */
export declare function getOriginalAssetEth(nftBridgeAddress: string, provider: ethers.Signer | ethers.providers.Provider, wrappedAddress: string, tokenId: string, lookupChain: ChainId | ChainName): Promise<WormholeWrappedNFTInfo>;
/**
 * Returns a origin chain and asset address on {originChain} for a provided Wormhole wrapped address
 * @param connection
 * @param nftBridgeAddress
 * @param mintAddress
 * @param [commitment]
 * @returns
 */
export declare function getOriginalAssetSolana(connection: Connection, nftBridgeAddress: PublicKeyInitData, mintAddress: PublicKeyInitData, commitment?: Commitment): Promise<WormholeWrappedNFTInfo>;
export declare const getOriginalAssetSol: typeof getOriginalAssetSolana;
export declare function getOriginalAssetTerra(client: LCDClient, wrappedAddress: string, lookupChain: ChainId | ChainName): Promise<WormholeWrappedInfo>;
/**
 * Given a token ID, returns the original asset chain and address. If this is a
 * native asset, the asset address will be the collection hash.
 * @param client
 * @param nftBridgeAddress
 * @param tokenId An object containing creator address, collection name, token
 * name, and property version, which together uniquely identify a token on
 * Aptos. For wrapped assets, property version will be 0.
 * @returns Object containing origin chain and Wormhole compatible 32-byte asset
 * address.
 */
export declare function getOriginalAssetAptos(client: AptosClient, nftBridgeAddress: string, tokenId: TokenTypes.TokenId): Promise<WormholeWrappedNFTInfo>;
