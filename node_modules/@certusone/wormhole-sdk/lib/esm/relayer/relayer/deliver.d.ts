import { BigNumber, ethers, ContractReceipt } from "ethers";
import { ChainName, Network } from "../../utils";
import { SignedVaa } from "../../vaa";
import { RelayerPayloadId, DeliveryInstruction, DeliveryOverrideArgs, VaaKey } from "../structs";
import { DeliveryTargetInfo } from "./helpers";
export declare type DeliveryInfo = {
    type: RelayerPayloadId.Delivery;
    sourceChain: ChainName;
    sourceTransactionHash: string;
    sourceDeliverySequenceNumber: number;
    deliveryInstruction: DeliveryInstruction;
    targetChainStatus: {
        chain: ChainName;
        events: DeliveryTargetInfo[];
    };
};
export declare type DeliveryArguments = {
    budget: BigNumber;
    deliveryInstruction: DeliveryInstruction;
    deliveryHash: string;
};
export declare function deliver(deliveryVaa: SignedVaa, signer: ethers.Signer, wormholeRPCs: string | string[], environment?: Network, overrides?: DeliveryOverrideArgs): Promise<ContractReceipt>;
export declare function deliveryBudget(delivery: DeliveryInstruction, overrides?: DeliveryOverrideArgs): BigNumber;
export declare function extractDeliveryArguments(vaa: SignedVaa, overrides?: DeliveryOverrideArgs): DeliveryArguments;
export declare function fetchAdditionalVaas(wormholeRPCs: string | string[], additionalVaaKeys: VaaKey[]): Promise<SignedVaa[]>;
