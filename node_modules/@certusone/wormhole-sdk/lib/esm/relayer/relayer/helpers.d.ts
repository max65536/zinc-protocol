import { ChainName, Network } from "../../";
import { BigNumber, ContractReceipt, ethers } from "ethers";
import { RelayerPayloadId, DeliveryInstruction, DeliveryStatus, RefundStatus, VaaKey, DeliveryOverrideArgs } from "../structs";
import { DeliveryProvider } from "../../ethers-contracts/";
import { VaaKeyStruct } from "../../ethers-contracts/IWormholeRelayer.sol/IWormholeRelayer";
export declare type DeliveryTargetInfo = {
    status: DeliveryStatus | string;
    transactionHash: string | null;
    vaaHash: string | null;
    sourceChain: ChainName;
    sourceVaaSequence: BigNumber | null;
    gasUsed: BigNumber;
    refundStatus: RefundStatus;
    revertString?: string;
    overrides?: DeliveryOverrideArgs;
};
export declare function parseWormholeLog(log: ethers.providers.Log): {
    type: RelayerPayloadId;
    parsed: DeliveryInstruction | string;
};
export declare function printChain(chainId: number): string;
export declare function getDefaultProvider(network: Network, chain: ChainName, ci?: boolean): ethers.providers.StaticJsonRpcProvider;
export declare function getDeliveryProvider(address: string, provider: ethers.providers.Provider): DeliveryProvider;
export declare function getBlockRange(provider: ethers.providers.Provider, timestamp?: number): [ethers.providers.BlockTag, ethers.providers.BlockTag];
export declare function getWormholeRelayerInfoBySourceSequence(environment: Network, targetChain: ChainName, targetChainProvider: ethers.providers.Provider, sourceChain: ChainName, sourceVaaSequence: BigNumber, blockStartNumber: ethers.providers.BlockTag, blockEndNumber: ethers.providers.BlockTag, targetWormholeRelayerAddress: string): Promise<{
    chain: ChainName;
    events: DeliveryTargetInfo[];
}>;
export declare function getWormholeRelayerDeliveryEventsBySourceSequence(environment: Network, targetChain: ChainName, targetChainProvider: ethers.providers.Provider, sourceChain: ChainName, sourceVaaSequence: BigNumber, blockStartNumber: ethers.providers.BlockTag, blockEndNumber: ethers.providers.BlockTag, targetWormholeRelayerAddress: string): Promise<DeliveryTargetInfo[]>;
export declare function deliveryStatus(status: number): DeliveryStatus.DeliverySuccess | DeliveryStatus.ReceiverFailure | DeliveryStatus.ForwardRequestSuccess | DeliveryStatus.ForwardRequestFailure | DeliveryStatus.ThisShouldNeverHappen;
export declare function transformDeliveryLog(log: {
    args: [
        string,
        number,
        BigNumber,
        string,
        number,
        BigNumber,
        number,
        string,
        string
    ];
    transactionHash: string;
}): DeliveryTargetInfo;
export declare function getWormholeRelayerLog(receipt: ContractReceipt, bridgeAddress: string, emitterAddress: string, index: number): {
    log: ethers.providers.Log;
    sequence: string;
};
export declare function vaaKeyToVaaKeyStruct(vaaKey: VaaKey): VaaKeyStruct;
export declare function getDeliveryHash(rx: ethers.ContractReceipt, sourceChain: ChainName, optionalParams?: {
    network?: Network;
    provider?: ethers.providers.Provider;
    index?: number;
}): Promise<string>;
