import { ChainName, Network } from "../..";
import { ethers } from "ethers";
import { DeliveryOverrideArgs } from "../structs";
import { DeliveryInfo } from "./deliver";
export declare type InfoRequestParams = {
    environment?: Network;
    sourceChainProvider?: ethers.providers.Provider;
    targetChainProviders?: Map<ChainName, ethers.providers.Provider>;
    targetChainBlockRanges?: Map<ChainName, [
        ethers.providers.BlockTag,
        ethers.providers.BlockTag
    ]>;
    wormholeRelayerWhMessageIndex?: number;
    wormholeRelayerAddresses?: Map<ChainName, string>;
};
export declare type GetPriceOptParams = {
    environment?: Network;
    receiverValue?: ethers.BigNumberish;
    wormholeRelayerAddress?: string;
    deliveryProviderAddress?: string;
    sourceChainProvider?: ethers.providers.Provider;
};
export declare function getPriceAndRefundInfo(sourceChain: ChainName, targetChain: ChainName, gasAmount: ethers.BigNumberish, optionalParams?: GetPriceOptParams): Promise<[ethers.BigNumber, ethers.BigNumber]>;
export declare function getPrice(sourceChain: ChainName, targetChain: ChainName, gasAmount: ethers.BigNumberish, optionalParams?: GetPriceOptParams): Promise<ethers.BigNumber>;
export declare function getWormholeRelayerInfo(sourceChain: ChainName, sourceTransaction: string, infoRequest?: InfoRequestParams): Promise<DeliveryInfo>;
export declare function printWormholeRelayerInfo(info: DeliveryInfo): void;
export declare function stringifyWormholeRelayerInfo(info: DeliveryInfo, excludeSourceInformation?: boolean, overrides?: DeliveryOverrideArgs): string;
