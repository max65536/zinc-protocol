import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "terra.treasury.v1beta1";
/** proposal request structure for adding burn tax exemption address(es) */
export interface AddBurnTaxExemptionAddressProposal {
    title: string;
    description: string;
    addresses: string[];
}
/** proposal request structure for removing burn tax exemption address(es) */
export interface RemoveBurnTaxExemptionAddressProposal {
    title: string;
    description: string;
    addresses: string[];
}
export declare const AddBurnTaxExemptionAddressProposal: {
    encode(message: AddBurnTaxExemptionAddressProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddBurnTaxExemptionAddressProposal;
    fromJSON(object: any): AddBurnTaxExemptionAddressProposal;
    toJSON(message: AddBurnTaxExemptionAddressProposal): unknown;
    fromPartial(object: DeepPartial<AddBurnTaxExemptionAddressProposal>): AddBurnTaxExemptionAddressProposal;
};
export declare const RemoveBurnTaxExemptionAddressProposal: {
    encode(message: RemoveBurnTaxExemptionAddressProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RemoveBurnTaxExemptionAddressProposal;
    fromJSON(object: any): RemoveBurnTaxExemptionAddressProposal;
    toJSON(message: RemoveBurnTaxExemptionAddressProposal): unknown;
    fromPartial(object: DeepPartial<RemoveBurnTaxExemptionAddressProposal>): RemoveBurnTaxExemptionAddressProposal;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
