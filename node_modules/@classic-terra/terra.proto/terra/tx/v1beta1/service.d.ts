import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Tx } from "../../../cosmos/tx/v1beta1/tx";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "terra.tx.v1beta1";
/**
 * ComputeTaxRequest is the request type for the Service.ComputeTax
 * RPC method.
 */
export interface ComputeTaxRequest {
    /**
     * tx is the transaction to simulate.
     * Deprecated. Send raw tx bytes instead.
     *
     * @deprecated
     */
    tx?: Tx;
    /** tx_bytes is the raw transaction. */
    txBytes: Uint8Array;
}
/**
 * ComputeTaxResponse is the response type for the Service.ComputeTax
 * RPC method.
 */
export interface ComputeTaxResponse {
    /** amount is the amount of coins to be paid as a fee */
    taxAmount: Coin[];
}
export declare const ComputeTaxRequest: {
    encode(message: ComputeTaxRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ComputeTaxRequest;
    fromJSON(object: any): ComputeTaxRequest;
    toJSON(message: ComputeTaxRequest): unknown;
    fromPartial(object: DeepPartial<ComputeTaxRequest>): ComputeTaxRequest;
};
export declare const ComputeTaxResponse: {
    encode(message: ComputeTaxResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ComputeTaxResponse;
    fromJSON(object: any): ComputeTaxResponse;
    toJSON(message: ComputeTaxResponse): unknown;
    fromPartial(object: DeepPartial<ComputeTaxResponse>): ComputeTaxResponse;
};
/** Service defines a gRPC service for interacting with transactions. */
export interface Service {
    /** EstimateFee simulates executing a transaction for estimating gas usage. */
    ComputeTax(request: DeepPartial<ComputeTaxRequest>, metadata?: grpc.Metadata): Promise<ComputeTaxResponse>;
}
export declare class ServiceClientImpl implements Service {
    private readonly rpc;
    constructor(rpc: Rpc);
    ComputeTax(request: DeepPartial<ComputeTaxRequest>, metadata?: grpc.Metadata): Promise<ComputeTaxResponse>;
}
export declare const ServiceDesc: {
    serviceName: string;
};
export declare const ServiceComputeTaxDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
