import { grpc } from "@injectivelabs/grpc-web";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "mito_api";
export interface GetVaultsRequest {
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    codeId?: string | undefined;
}
export interface GetVaultsResponse {
    /** Vaults data response */
    vaults: Vault[];
    pagination: Pagination | undefined;
}
export interface Vault {
    contractAddress: string;
    codeId: string;
    vaultName: string;
    marketId: string;
    currentTvl: number;
    profits: Changes | undefined;
    updatedAt: string;
    vaultType: string;
    lpTokenPrice: number;
    subaccountInfo: SubaccountBalance | undefined;
    masterContractAddress: string;
    totalLpAmount: string;
    slug: string;
    createdAt: string;
    notionalValueCap: string;
    tvlChanges: Changes | undefined;
}
export interface Changes {
    allTimeChange: number;
    threeMonthsChange?: number | undefined;
    oneMonthChange?: number | undefined;
    oneDayChange?: number | undefined;
    oneWeekChange?: number | undefined;
    oneYearChange?: number | undefined;
    threeYearsChange?: number | undefined;
    sixMonthsChange?: number | undefined;
}
export interface SubaccountBalance {
    subaccountId: string;
    balances: DenomBalance[];
}
export interface DenomBalance {
    denom: string;
    totalBalance: string;
}
export interface Pagination {
    total: number;
}
export interface GetVaultRequest {
    contractAddress?: string | undefined;
    slug?: string | undefined;
}
export interface GetVaultResponse {
    /**
     * Vault data response, if query by slug, there can be multiple vaults matching
     * the condition
     */
    vault: Vault[];
}
export interface LPTokenPriceChartRequest {
    vaultAddress: string;
    fromTime?: string | undefined;
    toTime?: string | undefined;
}
export interface LPTokenPriceChartResponse {
    prices: PriceSnapshot[];
}
export interface PriceSnapshot {
    price: number;
    updatedAt: string;
}
export interface TVLChartRequest {
    vaultAddress: string;
    fromTime?: string | undefined;
    toTime?: string | undefined;
}
export interface TVLChartResponse {
    prices: PriceSnapshot[];
}
export interface VaultsByHolderAddressRequest {
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    holderAddress: string;
    vaultAddress?: string | undefined;
}
export interface VaultsByHolderAddressResponse {
    subscriptions: Subscription[];
}
export interface Subscription {
    vaultInfo: Vault | undefined;
    lpAmount: string;
    holderAddress: string;
    lpAmountPercentage: number;
}
export interface LPHoldersRequest {
    pageSize?: number | undefined;
    pageIndex?: number | undefined;
    vaultAddress?: string | undefined;
}
export interface LPHoldersResponse {
    holders: Holders[];
}
export interface Holders {
    holderAddress: string;
    vaultAddress: string;
    amount: string;
    updatedAt: string;
    lpAmountPercentage: number;
    redemptionLockTime: string;
}
export interface PortfolioRequest {
    holderAddress: string;
}
export interface PortfolioResponse {
    totalValue: number;
    pnl: number;
    totalValueChart: PriceSnapshot[];
    pnlChart: PriceSnapshot[];
}
export interface LeaderboardRequest {
    epochId?: number | undefined;
}
export interface LeaderboardResponse {
    entries: LeaderboardEntry[];
    snapshotBlock: string;
    updatedAt: string;
    epochId: number;
}
export interface LeaderboardEntry {
    address: string;
    pnl: number;
}
export interface LeaderboardEpochsRequest {
    fromEpochId?: number | undefined;
    toEpochId?: number | undefined;
    pageSize?: number | undefined;
}
export interface LeaderboardEpochsResponse {
    epochs: LeaderboardEpoch[];
    pagination: Pagination | undefined;
}
export interface LeaderboardEpoch {
    epochId: number;
    startAt: string;
    endAt: string;
    isLive: boolean;
}
export interface TransfersHistoryRequest {
    vault?: string | undefined;
    account?: string | undefined;
    pageSize?: number | undefined;
    fromNumber?: number | undefined;
    toNumber?: number | undefined;
}
export interface TransfersHistoryResponse {
    transfers: Transfer[];
    pagination: Pagination | undefined;
}
export interface Transfer {
    lpAmount: string;
    coins: Coin[];
    usdValue: string;
    isDeposit: boolean;
    /** time in unix milli */
    executedAt: string;
    account: string;
    vault: string;
    txHash: string;
    tidByVault: number;
    tidByAccount: number;
}
export interface Coin {
    amount: string;
    denom: string;
}
export declare const GetVaultsRequest: {
    encode(message: GetVaultsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetVaultsRequest;
    fromJSON(object: any): GetVaultsRequest;
    toJSON(message: GetVaultsRequest): unknown;
    create(base?: DeepPartial<GetVaultsRequest>): GetVaultsRequest;
    fromPartial(object: DeepPartial<GetVaultsRequest>): GetVaultsRequest;
};
export declare const GetVaultsResponse: {
    encode(message: GetVaultsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetVaultsResponse;
    fromJSON(object: any): GetVaultsResponse;
    toJSON(message: GetVaultsResponse): unknown;
    create(base?: DeepPartial<GetVaultsResponse>): GetVaultsResponse;
    fromPartial(object: DeepPartial<GetVaultsResponse>): GetVaultsResponse;
};
export declare const Vault: {
    encode(message: Vault, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Vault;
    fromJSON(object: any): Vault;
    toJSON(message: Vault): unknown;
    create(base?: DeepPartial<Vault>): Vault;
    fromPartial(object: DeepPartial<Vault>): Vault;
};
export declare const Changes: {
    encode(message: Changes, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Changes;
    fromJSON(object: any): Changes;
    toJSON(message: Changes): unknown;
    create(base?: DeepPartial<Changes>): Changes;
    fromPartial(object: DeepPartial<Changes>): Changes;
};
export declare const SubaccountBalance: {
    encode(message: SubaccountBalance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubaccountBalance;
    fromJSON(object: any): SubaccountBalance;
    toJSON(message: SubaccountBalance): unknown;
    create(base?: DeepPartial<SubaccountBalance>): SubaccountBalance;
    fromPartial(object: DeepPartial<SubaccountBalance>): SubaccountBalance;
};
export declare const DenomBalance: {
    encode(message: DenomBalance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DenomBalance;
    fromJSON(object: any): DenomBalance;
    toJSON(message: DenomBalance): unknown;
    create(base?: DeepPartial<DenomBalance>): DenomBalance;
    fromPartial(object: DeepPartial<DenomBalance>): DenomBalance;
};
export declare const Pagination: {
    encode(message: Pagination, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Pagination;
    fromJSON(object: any): Pagination;
    toJSON(message: Pagination): unknown;
    create(base?: DeepPartial<Pagination>): Pagination;
    fromPartial(object: DeepPartial<Pagination>): Pagination;
};
export declare const GetVaultRequest: {
    encode(message: GetVaultRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetVaultRequest;
    fromJSON(object: any): GetVaultRequest;
    toJSON(message: GetVaultRequest): unknown;
    create(base?: DeepPartial<GetVaultRequest>): GetVaultRequest;
    fromPartial(object: DeepPartial<GetVaultRequest>): GetVaultRequest;
};
export declare const GetVaultResponse: {
    encode(message: GetVaultResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetVaultResponse;
    fromJSON(object: any): GetVaultResponse;
    toJSON(message: GetVaultResponse): unknown;
    create(base?: DeepPartial<GetVaultResponse>): GetVaultResponse;
    fromPartial(object: DeepPartial<GetVaultResponse>): GetVaultResponse;
};
export declare const LPTokenPriceChartRequest: {
    encode(message: LPTokenPriceChartRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LPTokenPriceChartRequest;
    fromJSON(object: any): LPTokenPriceChartRequest;
    toJSON(message: LPTokenPriceChartRequest): unknown;
    create(base?: DeepPartial<LPTokenPriceChartRequest>): LPTokenPriceChartRequest;
    fromPartial(object: DeepPartial<LPTokenPriceChartRequest>): LPTokenPriceChartRequest;
};
export declare const LPTokenPriceChartResponse: {
    encode(message: LPTokenPriceChartResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LPTokenPriceChartResponse;
    fromJSON(object: any): LPTokenPriceChartResponse;
    toJSON(message: LPTokenPriceChartResponse): unknown;
    create(base?: DeepPartial<LPTokenPriceChartResponse>): LPTokenPriceChartResponse;
    fromPartial(object: DeepPartial<LPTokenPriceChartResponse>): LPTokenPriceChartResponse;
};
export declare const PriceSnapshot: {
    encode(message: PriceSnapshot, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PriceSnapshot;
    fromJSON(object: any): PriceSnapshot;
    toJSON(message: PriceSnapshot): unknown;
    create(base?: DeepPartial<PriceSnapshot>): PriceSnapshot;
    fromPartial(object: DeepPartial<PriceSnapshot>): PriceSnapshot;
};
export declare const TVLChartRequest: {
    encode(message: TVLChartRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TVLChartRequest;
    fromJSON(object: any): TVLChartRequest;
    toJSON(message: TVLChartRequest): unknown;
    create(base?: DeepPartial<TVLChartRequest>): TVLChartRequest;
    fromPartial(object: DeepPartial<TVLChartRequest>): TVLChartRequest;
};
export declare const TVLChartResponse: {
    encode(message: TVLChartResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TVLChartResponse;
    fromJSON(object: any): TVLChartResponse;
    toJSON(message: TVLChartResponse): unknown;
    create(base?: DeepPartial<TVLChartResponse>): TVLChartResponse;
    fromPartial(object: DeepPartial<TVLChartResponse>): TVLChartResponse;
};
export declare const VaultsByHolderAddressRequest: {
    encode(message: VaultsByHolderAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VaultsByHolderAddressRequest;
    fromJSON(object: any): VaultsByHolderAddressRequest;
    toJSON(message: VaultsByHolderAddressRequest): unknown;
    create(base?: DeepPartial<VaultsByHolderAddressRequest>): VaultsByHolderAddressRequest;
    fromPartial(object: DeepPartial<VaultsByHolderAddressRequest>): VaultsByHolderAddressRequest;
};
export declare const VaultsByHolderAddressResponse: {
    encode(message: VaultsByHolderAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VaultsByHolderAddressResponse;
    fromJSON(object: any): VaultsByHolderAddressResponse;
    toJSON(message: VaultsByHolderAddressResponse): unknown;
    create(base?: DeepPartial<VaultsByHolderAddressResponse>): VaultsByHolderAddressResponse;
    fromPartial(object: DeepPartial<VaultsByHolderAddressResponse>): VaultsByHolderAddressResponse;
};
export declare const Subscription: {
    encode(message: Subscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subscription;
    fromJSON(object: any): Subscription;
    toJSON(message: Subscription): unknown;
    create(base?: DeepPartial<Subscription>): Subscription;
    fromPartial(object: DeepPartial<Subscription>): Subscription;
};
export declare const LPHoldersRequest: {
    encode(message: LPHoldersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LPHoldersRequest;
    fromJSON(object: any): LPHoldersRequest;
    toJSON(message: LPHoldersRequest): unknown;
    create(base?: DeepPartial<LPHoldersRequest>): LPHoldersRequest;
    fromPartial(object: DeepPartial<LPHoldersRequest>): LPHoldersRequest;
};
export declare const LPHoldersResponse: {
    encode(message: LPHoldersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LPHoldersResponse;
    fromJSON(object: any): LPHoldersResponse;
    toJSON(message: LPHoldersResponse): unknown;
    create(base?: DeepPartial<LPHoldersResponse>): LPHoldersResponse;
    fromPartial(object: DeepPartial<LPHoldersResponse>): LPHoldersResponse;
};
export declare const Holders: {
    encode(message: Holders, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Holders;
    fromJSON(object: any): Holders;
    toJSON(message: Holders): unknown;
    create(base?: DeepPartial<Holders>): Holders;
    fromPartial(object: DeepPartial<Holders>): Holders;
};
export declare const PortfolioRequest: {
    encode(message: PortfolioRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortfolioRequest;
    fromJSON(object: any): PortfolioRequest;
    toJSON(message: PortfolioRequest): unknown;
    create(base?: DeepPartial<PortfolioRequest>): PortfolioRequest;
    fromPartial(object: DeepPartial<PortfolioRequest>): PortfolioRequest;
};
export declare const PortfolioResponse: {
    encode(message: PortfolioResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortfolioResponse;
    fromJSON(object: any): PortfolioResponse;
    toJSON(message: PortfolioResponse): unknown;
    create(base?: DeepPartial<PortfolioResponse>): PortfolioResponse;
    fromPartial(object: DeepPartial<PortfolioResponse>): PortfolioResponse;
};
export declare const LeaderboardRequest: {
    encode(message: LeaderboardRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardRequest;
    fromJSON(object: any): LeaderboardRequest;
    toJSON(message: LeaderboardRequest): unknown;
    create(base?: DeepPartial<LeaderboardRequest>): LeaderboardRequest;
    fromPartial(object: DeepPartial<LeaderboardRequest>): LeaderboardRequest;
};
export declare const LeaderboardResponse: {
    encode(message: LeaderboardResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardResponse;
    fromJSON(object: any): LeaderboardResponse;
    toJSON(message: LeaderboardResponse): unknown;
    create(base?: DeepPartial<LeaderboardResponse>): LeaderboardResponse;
    fromPartial(object: DeepPartial<LeaderboardResponse>): LeaderboardResponse;
};
export declare const LeaderboardEntry: {
    encode(message: LeaderboardEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardEntry;
    fromJSON(object: any): LeaderboardEntry;
    toJSON(message: LeaderboardEntry): unknown;
    create(base?: DeepPartial<LeaderboardEntry>): LeaderboardEntry;
    fromPartial(object: DeepPartial<LeaderboardEntry>): LeaderboardEntry;
};
export declare const LeaderboardEpochsRequest: {
    encode(message: LeaderboardEpochsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardEpochsRequest;
    fromJSON(object: any): LeaderboardEpochsRequest;
    toJSON(message: LeaderboardEpochsRequest): unknown;
    create(base?: DeepPartial<LeaderboardEpochsRequest>): LeaderboardEpochsRequest;
    fromPartial(object: DeepPartial<LeaderboardEpochsRequest>): LeaderboardEpochsRequest;
};
export declare const LeaderboardEpochsResponse: {
    encode(message: LeaderboardEpochsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardEpochsResponse;
    fromJSON(object: any): LeaderboardEpochsResponse;
    toJSON(message: LeaderboardEpochsResponse): unknown;
    create(base?: DeepPartial<LeaderboardEpochsResponse>): LeaderboardEpochsResponse;
    fromPartial(object: DeepPartial<LeaderboardEpochsResponse>): LeaderboardEpochsResponse;
};
export declare const LeaderboardEpoch: {
    encode(message: LeaderboardEpoch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeaderboardEpoch;
    fromJSON(object: any): LeaderboardEpoch;
    toJSON(message: LeaderboardEpoch): unknown;
    create(base?: DeepPartial<LeaderboardEpoch>): LeaderboardEpoch;
    fromPartial(object: DeepPartial<LeaderboardEpoch>): LeaderboardEpoch;
};
export declare const TransfersHistoryRequest: {
    encode(message: TransfersHistoryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransfersHistoryRequest;
    fromJSON(object: any): TransfersHistoryRequest;
    toJSON(message: TransfersHistoryRequest): unknown;
    create(base?: DeepPartial<TransfersHistoryRequest>): TransfersHistoryRequest;
    fromPartial(object: DeepPartial<TransfersHistoryRequest>): TransfersHistoryRequest;
};
export declare const TransfersHistoryResponse: {
    encode(message: TransfersHistoryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransfersHistoryResponse;
    fromJSON(object: any): TransfersHistoryResponse;
    toJSON(message: TransfersHistoryResponse): unknown;
    create(base?: DeepPartial<TransfersHistoryResponse>): TransfersHistoryResponse;
    fromPartial(object: DeepPartial<TransfersHistoryResponse>): TransfersHistoryResponse;
};
export declare const Transfer: {
    encode(message: Transfer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Transfer;
    fromJSON(object: any): Transfer;
    toJSON(message: Transfer): unknown;
    create(base?: DeepPartial<Transfer>): Transfer;
    fromPartial(object: DeepPartial<Transfer>): Transfer;
};
export declare const Coin: {
    encode(message: Coin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Coin;
    fromJSON(object: any): Coin;
    toJSON(message: Coin): unknown;
    create(base?: DeepPartial<Coin>): Coin;
    fromPartial(object: DeepPartial<Coin>): Coin;
};
/** Get mito user portfolios, vaults and more */
export interface MitoAPI {
    /** List all vaults */
    GetVaults(request: DeepPartial<GetVaultsRequest>, metadata?: grpc.Metadata): Promise<GetVaultsResponse>;
    /** List a vault by contract address */
    GetVault(request: DeepPartial<GetVaultRequest>, metadata?: grpc.Metadata): Promise<GetVaultResponse>;
    /** LPTokenPriceChart implements LPTokenPriceChart. */
    LPTokenPriceChart(request: DeepPartial<LPTokenPriceChartRequest>, metadata?: grpc.Metadata): Promise<LPTokenPriceChartResponse>;
    /** TVLChart implements TVLChart. */
    TVLChart(request: DeepPartial<TVLChartRequest>, metadata?: grpc.Metadata): Promise<TVLChartResponse>;
    /** Get list of vaults that user subscribes to */
    VaultsByHolderAddress(request: DeepPartial<VaultsByHolderAddressRequest>, metadata?: grpc.Metadata): Promise<VaultsByHolderAddressResponse>;
    /** Get list of address that holds this LP token */
    LPHolders(request: DeepPartial<LPHoldersRequest>, metadata?: grpc.Metadata): Promise<LPHoldersResponse>;
    /** Portfolio summary of an account */
    Portfolio(request: DeepPartial<PortfolioRequest>, metadata?: grpc.Metadata): Promise<PortfolioResponse>;
    /** Leaderboard ranking */
    Leaderboard(request: DeepPartial<LeaderboardRequest>, metadata?: grpc.Metadata): Promise<LeaderboardResponse>;
    /** Get leaderboard epochs */
    LeaderboardEpochs(request: DeepPartial<LeaderboardEpochsRequest>, metadata?: grpc.Metadata): Promise<LeaderboardEpochsResponse>;
    /** Return historical transfers (i.e Subscribe - Deposit / Redeem - withdrawal) */
    TransfersHistory(request: DeepPartial<TransfersHistoryRequest>, metadata?: grpc.Metadata): Promise<TransfersHistoryResponse>;
}
export declare class MitoAPIClientImpl implements MitoAPI {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetVaults(request: DeepPartial<GetVaultsRequest>, metadata?: grpc.Metadata): Promise<GetVaultsResponse>;
    GetVault(request: DeepPartial<GetVaultRequest>, metadata?: grpc.Metadata): Promise<GetVaultResponse>;
    LPTokenPriceChart(request: DeepPartial<LPTokenPriceChartRequest>, metadata?: grpc.Metadata): Promise<LPTokenPriceChartResponse>;
    TVLChart(request: DeepPartial<TVLChartRequest>, metadata?: grpc.Metadata): Promise<TVLChartResponse>;
    VaultsByHolderAddress(request: DeepPartial<VaultsByHolderAddressRequest>, metadata?: grpc.Metadata): Promise<VaultsByHolderAddressResponse>;
    LPHolders(request: DeepPartial<LPHoldersRequest>, metadata?: grpc.Metadata): Promise<LPHoldersResponse>;
    Portfolio(request: DeepPartial<PortfolioRequest>, metadata?: grpc.Metadata): Promise<PortfolioResponse>;
    Leaderboard(request: DeepPartial<LeaderboardRequest>, metadata?: grpc.Metadata): Promise<LeaderboardResponse>;
    LeaderboardEpochs(request: DeepPartial<LeaderboardEpochsRequest>, metadata?: grpc.Metadata): Promise<LeaderboardEpochsResponse>;
    TransfersHistory(request: DeepPartial<TransfersHistoryRequest>, metadata?: grpc.Metadata): Promise<TransfersHistoryResponse>;
}
export declare const MitoAPIDesc: {
    serviceName: string;
};
export declare const MitoAPIGetVaultsDesc: UnaryMethodDefinitionish;
export declare const MitoAPIGetVaultDesc: UnaryMethodDefinitionish;
export declare const MitoAPILPTokenPriceChartDesc: UnaryMethodDefinitionish;
export declare const MitoAPITVLChartDesc: UnaryMethodDefinitionish;
export declare const MitoAPIVaultsByHolderAddressDesc: UnaryMethodDefinitionish;
export declare const MitoAPILPHoldersDesc: UnaryMethodDefinitionish;
export declare const MitoAPIPortfolioDesc: UnaryMethodDefinitionish;
export declare const MitoAPILeaderboardDesc: UnaryMethodDefinitionish;
export declare const MitoAPILeaderboardEpochsDesc: UnaryMethodDefinitionish;
export declare const MitoAPITransfersHistoryDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare var tsProtoGlobalThis: any;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends tsProtoGlobalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
