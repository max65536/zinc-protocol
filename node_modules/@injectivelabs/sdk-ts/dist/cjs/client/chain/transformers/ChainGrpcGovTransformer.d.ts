import { GovModuleStateParams, Proposal, GrpcProposal, ProposalDeposit, Vote, TallyResult, GrpcTallyResult, GrpcGovernanceDepositParams, GrpcGovernanceVotingParams, GrpcGovernanceTallyParams } from '../types/gov';
import { Pagination } from '../../../types/index';
import { CosmosGovV1Beta1Query } from '@injectivelabs/core-proto-ts';
/**
 * @category Chain Grpc Transformer
 */
export declare class ChainGrpcGovTransformer {
    static moduleParamsResponseToModuleParams(response: CosmosGovV1Beta1Query.QueryParamsResponse): GovModuleStateParams;
    static moduleParamsResponseToModuleParamsByType({ depositParams, votingParams, tallyParams, }: {
        depositParams: GrpcGovernanceDepositParams;
        votingParams: GrpcGovernanceVotingParams;
        tallyParams: GrpcGovernanceTallyParams;
    }): GovModuleStateParams;
    static proposalResponseToProposal(response: CosmosGovV1Beta1Query.QueryProposalResponse): Proposal;
    static proposalsResponseToProposals(response: CosmosGovV1Beta1Query.QueryProposalsResponse): {
        proposals: Proposal[];
        pagination: Pagination;
    };
    static depositsResponseToDeposits(response: CosmosGovV1Beta1Query.QueryDepositsResponse): {
        deposits: ProposalDeposit[];
        pagination: Pagination;
    };
    static votesResponseToVotes(response: CosmosGovV1Beta1Query.QueryVotesResponse): {
        votes: Vote[];
        pagination: Pagination;
    };
    static tallyResultResponseToTallyResult(response: CosmosGovV1Beta1Query.QueryTallyResultResponse): TallyResult;
    static grpcTallyResultToTallyResult(result: GrpcTallyResult | undefined): TallyResult;
    static grpcProposalToProposal(proposal: GrpcProposal): Proposal;
}
//# sourceMappingURL=ChainGrpcGovTransformer.d.ts.map