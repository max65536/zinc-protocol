import { MitoApi } from '@injectivelabs/mito-proto-ts';
/**
 * @category Indexer Grpc API
 */
export declare class IndexerGrpcMitoApi {
    protected module: string;
    protected client: MitoApi.MitoAPIClientImpl;
    constructor(endpoint: string);
    fetchVault({ contractAddress, slug, }: {
        contractAddress?: string;
        slug?: string;
    }): Promise<import("../types").MitoVault>;
    fetchVaults({ pageSize, pageIndex, codeId, }: {
        pageSize?: number;
        pageIndex?: number;
        codeId?: string;
    }): Promise<{
        vaults: import("../types").MitoVault[];
        pagination?: import("../types").MitoPagination | undefined;
    }>;
    fetchLpTokenPriceChart({ vaultAddress, from, to, }: {
        vaultAddress: string;
        from?: string;
        to?: string;
    }): Promise<import("../types").MitoPriceSnapshot[]>;
    fetchTVLChartRequest({ vaultAddress, from, to, }: {
        vaultAddress: string;
        from?: string;
        to?: string;
    }): Promise<import("../types").MitoPriceSnapshot[]>;
    fetchVaultsByHolderAddress({ pageSize, pageIndex, holderAddress, vaultAddress, }: {
        pageSize?: number;
        pageIndex?: number;
        holderAddress: string;
        vaultAddress?: string;
    }): Promise<import("../types").MitoSubscription[]>;
    fetchLPHolders({ pageSize, pageIndex, vaultAddress, }: {
        pageSize?: number;
        pageIndex?: number;
        vaultAddress: string;
    }): Promise<import("../types").MitoHolders[]>;
    fetchHolderPortfolio(holderAddress: string): Promise<import("../types").MitoPortfolio>;
    fetchLeaderboard(epochId?: number): Promise<import("../types").MitoLeaderboard>;
    fetchTransferHistory({ vault, account, pageSize, toNumber, fromNumber, }: {
        vault?: string;
        account?: string;
        pageSize?: number;
        toNumber?: number;
        fromNumber?: number;
    }): Promise<{
        transfers: import("../types").MitoTransfer[];
        pagination: import("../types").MitoPagination | undefined;
    }>;
    fetchLeaderboardEpochs({ pageSize, toEpochId, fromEpochId, }: {
        pageSize?: number;
        toEpochId?: number;
        fromEpochId?: number;
    }): Promise<{
        epochs: import("../types").MitoLeaderboardEpoch[];
        pagination: import("../types").MitoPagination | undefined;
    }>;
}
//# sourceMappingURL=IndexerGrpcMitoApi.d.ts.map