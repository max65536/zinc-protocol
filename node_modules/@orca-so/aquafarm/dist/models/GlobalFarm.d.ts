import { PublicKey } from "@solana/web3.js";
import { u64 } from "@solana/spl-token";
import Decimal from "decimal.js";
export default class GlobalFarm {
    publicKey: PublicKey;
    isInitialized: boolean;
    authority: PublicKey;
    nonce: number;
    tokenProgramId: PublicKey;
    emissionsAuthority: PublicKey;
    removeRewardsAuthority: PublicKey;
    baseTokenMint: PublicKey;
    baseTokenVault: PublicKey;
    rewardTokenVault: PublicKey;
    farmTokenMint: PublicKey;
    emissionsPerSecondNumerator: u64;
    emissionsPerSecondDenominator: u64;
    lastUpdatedTimestamp: u64;
    cumulativeEmissionsPerFarmToken: Decimal;
    constructor(params: {
        publicKey: PublicKey;
        isInitialized: boolean;
        authority: PublicKey;
        nonce: number;
        tokenProgramId: PublicKey;
        emissionsAuthority: PublicKey;
        removeRewardsAuthority: PublicKey;
        baseTokenMint: PublicKey;
        baseTokenVault: PublicKey;
        rewardTokenVault: PublicKey;
        farmTokenMint: PublicKey;
        emissionsPerSecondNumerator: u64;
        emissionsPerSecondDenominator: u64;
        lastUpdatedTimestamp: u64;
        cumulativeEmissionsPerFarmToken: Decimal;
    });
    constructSetEmissionsPerSecondIx(numerator: u64, denominator: u64, programId: PublicKey): import("@solana/web3.js").TransactionInstruction;
    toString(): string;
}
/**
 * @returns The PDA used for this Aquafarm instance (generated by using the same
 *  seeds as the smart contract: global farm state pubkey + saved nonce)
 */
export declare function getAuthorityAndNonce(publicKey: PublicKey, programId: PublicKey): Promise<[PublicKey, number]>;
export declare function getGlobalFarmAddress(baseTokenMint: PublicKey, rewardTokenMint: PublicKey, funder: PublicKey, tokenProgramId: PublicKey, programId: PublicKey): Promise<[PublicKey, number]>;
